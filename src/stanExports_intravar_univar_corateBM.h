// Generated by rstantools.  Do not edit by hand.

/*
    contSimmap is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    contSimmap is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with contSimmap.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_intravar_univar_corateBM_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_intravar_univar_corateBM");
    reader.add_event(212, 210, "end", "model_intravar_univar_corateBM");
    return reader;
}
template <typename T1__, typename T2__, typename T3__, typename T4__>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type, Eigen::Dynamic, 1>
get_X(const int& n,
          const T1__& X0,
          const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& prune_T,
          const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& R,
          const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& raw_X,
          const std::vector<int>& preorder,
          const std::vector<int>& real_e,
          const std::vector<std::vector<int> >& des_e,
          const std::vector<int>& tip_e, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 5;
        validate_non_negative_index("XX", "((2 * n) - 1)", ((2 * n) - 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> XX(((2 * n) - 1));
        stan::math::initialize(XX, DUMMY_VAR__);
        stan::math::fill(XX, DUMMY_VAR__);
        current_statement_begin__ = 6;
        validate_non_negative_index("SS", "((2 * n) - 1)", ((2 * n) - 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> SS(((2 * n) - 1));
        stan::math::initialize(SS, DUMMY_VAR__);
        stan::math::fill(SS, DUMMY_VAR__);
        current_statement_begin__ = 7;
        stan::model::assign(XX, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    X0, 
                    "assigning variable XX");
        current_statement_begin__ = 8;
        stan::math::assign(SS, rep_vector(0, ((2 * n) - 1)));
        current_statement_begin__ = 9;
        stan::model::assign(SS, 
                    stan::model::cons_list(stan::model::index_multi(real_e), stan::model::nil_index_list()), 
                    elt_multiply(stan::math::sqrt(elt_multiply(stan::model::rvalue(prune_T, stan::model::cons_list(stan::model::index_multi(real_e), stan::model::nil_index_list()), "prune_T"), stan::math::exp(R))), raw_X), 
                    "assigning variable SS");
        current_statement_begin__ = 10;
        for (auto& i : preorder) {
            (void) i;  // dummy to suppress unused var warning
            current_statement_begin__ = 11;
            stan::model::assign(XX, 
                        stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(des_e, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "des_e")), stan::model::nil_index_list()), 
                        stan::model::deep_copy(add(get_base1(XX, i, "XX", 1), stan::model::rvalue(SS, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(des_e, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "des_e")), stan::model::nil_index_list()), "SS"))), 
                        "assigning variable XX");
        }
        current_statement_begin__ = 13;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::model::rvalue(XX, stan::model::cons_list(stan::model::index_multi(tip_e), stan::model::nil_index_list()), "XX"));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct get_X_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type, Eigen::Dynamic, 1>
    operator()(const int& n,
          const T1__& X0,
          const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& prune_T,
          const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& R,
          const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& raw_X,
          const std::vector<int>& preorder,
          const std::vector<int>& real_e,
          const std::vector<std::vector<int> >& des_e,
          const std::vector<int>& tip_e, std::ostream* pstream__) const {
        return get_X(n, X0, prune_T, R, raw_X, preorder, real_e, des_e, tip_e, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_intravar_univar_corateBM
  : public stan::model::model_base_crtp<model_intravar_univar_corateBM> {
private:
        int obs;
        int n;
        int e;
        vector_d Y;
        std::vector<int> X_id;
        matrix_d eV;
        int n_tp;
        std::vector<int> which_tp;
        vector_d tp_mu;
        vector_d tp_sig;
        vector_d prune_T;
        std::vector<std::vector<int> > des_e;
        std::vector<int> tip_e;
        std::vector<int> real_e;
        double Ysig2_prior;
        double R0_prior_mu;
        double R0_prior_sig;
        double Rsig2_prior;
        double X0_prior_mu;
        double X0_prior_sig;
        double Rmu_prior_mu;
        double Rmu_prior_sig;
        int constr_Rsig2;
        int constr_Rmu;
        double lik_power;
        matrix_d chol_eV;
        vector_d T_l;
        vector_d T_1;
        vector_d T_2;
        std::vector<int> preorder;
        int lik_pow_ind;
        int has_tp;
        int has_obs;
public:
    model_intravar_univar_corateBM(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_intravar_univar_corateBM(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_intravar_univar_corateBM_namespace::model_intravar_univar_corateBM";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "obs", "int", context__.to_vec());
            obs = int(0);
            vals_i__ = context__.vals_i("obs");
            pos__ = 0;
            obs = vals_i__[pos__++];
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "e", "int", context__.to_vec());
            e = int(0);
            vals_i__ = context__.vals_i("e");
            pos__ = 0;
            e = vals_i__[pos__++];
            current_statement_begin__ = 21;
            validate_non_negative_index("Y", "obs", obs);
            context__.validate_dims("data initialization", "Y", "vector_d", context__.to_vec(obs));
            Y = Eigen::Matrix<double, Eigen::Dynamic, 1>(obs);
            vals_r__ = context__.vals_r("Y");
            pos__ = 0;
            size_t Y_j_1_max__ = obs;
            for (size_t j_1__ = 0; j_1__ < Y_j_1_max__; ++j_1__) {
                Y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("X_id", "obs", obs);
            context__.validate_dims("data initialization", "X_id", "int", context__.to_vec(obs));
            X_id = std::vector<int>(obs, int(0));
            vals_i__ = context__.vals_i("X_id");
            pos__ = 0;
            size_t X_id_k_0_max__ = obs;
            for (size_t k_0__ = 0; k_0__ < X_id_k_0_max__; ++k_0__) {
                X_id[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 23;
            validate_non_negative_index("eV", "e", e);
            validate_non_negative_index("eV", "e", e);
            context__.validate_dims("data initialization", "eV", "matrix_d", context__.to_vec(e,e));
            eV = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(e, e);
            vals_r__ = context__.vals_r("eV");
            pos__ = 0;
            size_t eV_j_2_max__ = e;
            size_t eV_j_1_max__ = e;
            for (size_t j_2__ = 0; j_2__ < eV_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < eV_j_1_max__; ++j_1__) {
                    eV(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "n_tp", "int", context__.to_vec());
            n_tp = int(0);
            vals_i__ = context__.vals_i("n_tp");
            pos__ = 0;
            n_tp = vals_i__[pos__++];
            current_statement_begin__ = 28;
            validate_non_negative_index("which_tp", "n_tp", n_tp);
            context__.validate_dims("data initialization", "which_tp", "int", context__.to_vec(n_tp));
            which_tp = std::vector<int>(n_tp, int(0));
            vals_i__ = context__.vals_i("which_tp");
            pos__ = 0;
            size_t which_tp_k_0_max__ = n_tp;
            for (size_t k_0__ = 0; k_0__ < which_tp_k_0_max__; ++k_0__) {
                which_tp[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 29;
            validate_non_negative_index("tp_mu", "n_tp", n_tp);
            context__.validate_dims("data initialization", "tp_mu", "vector_d", context__.to_vec(n_tp));
            tp_mu = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_tp);
            vals_r__ = context__.vals_r("tp_mu");
            pos__ = 0;
            size_t tp_mu_j_1_max__ = n_tp;
            for (size_t j_1__ = 0; j_1__ < tp_mu_j_1_max__; ++j_1__) {
                tp_mu(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 30;
            validate_non_negative_index("tp_sig", "n_tp", n_tp);
            context__.validate_dims("data initialization", "tp_sig", "vector_d", context__.to_vec(n_tp));
            tp_sig = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_tp);
            vals_r__ = context__.vals_r("tp_sig");
            pos__ = 0;
            size_t tp_sig_j_1_max__ = n_tp;
            for (size_t j_1__ = 0; j_1__ < tp_sig_j_1_max__; ++j_1__) {
                tp_sig(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 34;
            validate_non_negative_index("prune_T", "((2 * n) - 1)", ((2 * n) - 1));
            context__.validate_dims("data initialization", "prune_T", "vector_d", context__.to_vec(((2 * n) - 1)));
            prune_T = Eigen::Matrix<double, Eigen::Dynamic, 1>(((2 * n) - 1));
            vals_r__ = context__.vals_r("prune_T");
            pos__ = 0;
            size_t prune_T_j_1_max__ = ((2 * n) - 1);
            for (size_t j_1__ = 0; j_1__ < prune_T_j_1_max__; ++j_1__) {
                prune_T(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 35;
            validate_non_negative_index("des_e", "((2 * n) - 1)", ((2 * n) - 1));
            validate_non_negative_index("des_e", "2", 2);
            context__.validate_dims("data initialization", "des_e", "int", context__.to_vec(((2 * n) - 1),2));
            des_e = std::vector<std::vector<int> >(((2 * n) - 1), std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("des_e");
            pos__ = 0;
            size_t des_e_k_0_max__ = ((2 * n) - 1);
            size_t des_e_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < des_e_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < des_e_k_0_max__; ++k_0__) {
                    des_e[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 36;
            validate_non_negative_index("tip_e", "n", n);
            context__.validate_dims("data initialization", "tip_e", "int", context__.to_vec(n));
            tip_e = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("tip_e");
            pos__ = 0;
            size_t tip_e_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < tip_e_k_0_max__; ++k_0__) {
                tip_e[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 37;
            validate_non_negative_index("real_e", "e", e);
            context__.validate_dims("data initialization", "real_e", "int", context__.to_vec(e));
            real_e = std::vector<int>(e, int(0));
            vals_i__ = context__.vals_i("real_e");
            pos__ = 0;
            size_t real_e_k_0_max__ = e;
            for (size_t k_0__ = 0; k_0__ < real_e_k_0_max__; ++k_0__) {
                real_e[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "Ysig2_prior", "double", context__.to_vec());
            Ysig2_prior = double(0);
            vals_r__ = context__.vals_r("Ysig2_prior");
            pos__ = 0;
            Ysig2_prior = vals_r__[pos__++];
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "R0_prior_mu", "double", context__.to_vec());
            R0_prior_mu = double(0);
            vals_r__ = context__.vals_r("R0_prior_mu");
            pos__ = 0;
            R0_prior_mu = vals_r__[pos__++];
            current_statement_begin__ = 43;
            context__.validate_dims("data initialization", "R0_prior_sig", "double", context__.to_vec());
            R0_prior_sig = double(0);
            vals_r__ = context__.vals_r("R0_prior_sig");
            pos__ = 0;
            R0_prior_sig = vals_r__[pos__++];
            current_statement_begin__ = 44;
            context__.validate_dims("data initialization", "Rsig2_prior", "double", context__.to_vec());
            Rsig2_prior = double(0);
            vals_r__ = context__.vals_r("Rsig2_prior");
            pos__ = 0;
            Rsig2_prior = vals_r__[pos__++];
            current_statement_begin__ = 45;
            context__.validate_dims("data initialization", "X0_prior_mu", "double", context__.to_vec());
            X0_prior_mu = double(0);
            vals_r__ = context__.vals_r("X0_prior_mu");
            pos__ = 0;
            X0_prior_mu = vals_r__[pos__++];
            current_statement_begin__ = 46;
            context__.validate_dims("data initialization", "X0_prior_sig", "double", context__.to_vec());
            X0_prior_sig = double(0);
            vals_r__ = context__.vals_r("X0_prior_sig");
            pos__ = 0;
            X0_prior_sig = vals_r__[pos__++];
            current_statement_begin__ = 47;
            context__.validate_dims("data initialization", "Rmu_prior_mu", "double", context__.to_vec());
            Rmu_prior_mu = double(0);
            vals_r__ = context__.vals_r("Rmu_prior_mu");
            pos__ = 0;
            Rmu_prior_mu = vals_r__[pos__++];
            current_statement_begin__ = 48;
            context__.validate_dims("data initialization", "Rmu_prior_sig", "double", context__.to_vec());
            Rmu_prior_sig = double(0);
            vals_r__ = context__.vals_r("Rmu_prior_sig");
            pos__ = 0;
            Rmu_prior_sig = vals_r__[pos__++];
            current_statement_begin__ = 52;
            context__.validate_dims("data initialization", "constr_Rsig2", "int", context__.to_vec());
            constr_Rsig2 = int(0);
            vals_i__ = context__.vals_i("constr_Rsig2");
            pos__ = 0;
            constr_Rsig2 = vals_i__[pos__++];
            current_statement_begin__ = 53;
            context__.validate_dims("data initialization", "constr_Rmu", "int", context__.to_vec());
            constr_Rmu = int(0);
            vals_i__ = context__.vals_i("constr_Rmu");
            pos__ = 0;
            constr_Rmu = vals_i__[pos__++];
            current_statement_begin__ = 57;
            context__.validate_dims("data initialization", "lik_power", "double", context__.to_vec());
            lik_power = double(0);
            vals_r__ = context__.vals_r("lik_power");
            pos__ = 0;
            lik_power = vals_r__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 61;
            validate_non_negative_index("chol_eV", "(constr_Rsig2 ? 0 : e )", (constr_Rsig2 ? 0 : e ));
            validate_non_negative_index("chol_eV", "(constr_Rsig2 ? 0 : e )", (constr_Rsig2 ? 0 : e ));
            chol_eV = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((constr_Rsig2 ? 0 : e ), (constr_Rsig2 ? 0 : e ));
            stan::math::fill(chol_eV, DUMMY_VAR__);
            current_statement_begin__ = 62;
            validate_non_negative_index("T_l", "(constr_Rmu ? 0 : e )", (constr_Rmu ? 0 : e ));
            T_l = Eigen::Matrix<double, Eigen::Dynamic, 1>((constr_Rmu ? 0 : e ));
            stan::math::fill(T_l, DUMMY_VAR__);
            current_statement_begin__ = 63;
            validate_non_negative_index("T_1", "(constr_Rmu ? 0 : e )", (constr_Rmu ? 0 : e ));
            T_1 = Eigen::Matrix<double, Eigen::Dynamic, 1>((constr_Rmu ? 0 : e ));
            stan::math::fill(T_1, DUMMY_VAR__);
            current_statement_begin__ = 64;
            validate_non_negative_index("T_2", "(constr_Rmu ? 0 : e )", (constr_Rmu ? 0 : e ));
            T_2 = Eigen::Matrix<double, Eigen::Dynamic, 1>((constr_Rmu ? 0 : e ));
            stan::math::fill(T_2, DUMMY_VAR__);
            current_statement_begin__ = 65;
            validate_non_negative_index("preorder", "(n - 1)", (n - 1));
            preorder = std::vector<int>((n - 1), int(0));
            stan::math::fill(preorder, std::numeric_limits<int>::min());
            current_statement_begin__ = 66;
            lik_pow_ind = int(0);
            stan::math::fill(lik_pow_ind, std::numeric_limits<int>::min());
            current_statement_begin__ = 67;
            has_tp = int(0);
            stan::math::fill(has_tp, std::numeric_limits<int>::min());
            current_statement_begin__ = 68;
            has_obs = int(0);
            stan::math::fill(has_obs, std::numeric_limits<int>::min());
            // execute transformed data statements
            current_statement_begin__ = 72;
            if (as_bool(logical_negation(constr_Rsig2))) {
                current_statement_begin__ = 73;
                stan::math::assign(chol_eV, cholesky_decompose(eV));
            }
            current_statement_begin__ = 75;
            if (as_bool(logical_negation(constr_Rmu))) {
                current_statement_begin__ = 76;
                stan::math::assign(T_l, stan::model::rvalue(prune_T, stan::model::cons_list(stan::model::index_multi(real_e), stan::model::nil_index_list()), "prune_T"));
                current_statement_begin__ = 77;
                stan::math::assign(T_1, subtract(diagonal(eV), divide(stan::model::rvalue(prune_T, stan::model::cons_list(stan::model::index_multi(real_e), stan::model::nil_index_list()), "prune_T"), 3)));
                current_statement_begin__ = 78;
                stan::math::assign(T_2, add(diagonal(eV), divide(multiply(2, stan::model::rvalue(prune_T, stan::model::cons_list(stan::model::index_multi(real_e), stan::model::nil_index_list()), "prune_T")), 3)));
            }
            {
            current_statement_begin__ = 83;
            int counter(0);
            (void) counter;  // dummy to suppress unused var warning
            stan::math::fill(counter, std::numeric_limits<int>::min());
            current_statement_begin__ = 84;
            stan::math::assign(counter, 0);
            current_statement_begin__ = 85;
            for (int i = 1; i <= ((2 * n) - 1); ++i) {
                current_statement_begin__ = 86;
                if (as_bool(logical_eq(get_base1(get_base1(des_e, i, "des_e", 1), 1, "des_e", 2), -(1)))) {
                    current_statement_begin__ = 87;
                    continue;
                }
                current_statement_begin__ = 89;
                stan::math::assign(counter, (counter + 1));
                current_statement_begin__ = 90;
                stan::model::assign(preorder, 
                            stan::model::cons_list(stan::model::index_uni(counter), stan::model::nil_index_list()), 
                            i, 
                            "assigning variable preorder");
            }
            }
            current_statement_begin__ = 94;
            if (as_bool(logical_eq(lik_power, 0))) {
                current_statement_begin__ = 95;
                stan::math::assign(lik_pow_ind, 0);
            } else {
                current_statement_begin__ = 97;
                stan::math::assign(lik_pow_ind, 1);
            }
            current_statement_begin__ = 99;
            if (as_bool(logical_eq(n_tp, 0))) {
                current_statement_begin__ = 100;
                stan::math::assign(has_tp, 0);
            } else {
                current_statement_begin__ = 102;
                stan::math::assign(has_tp, 1);
            }
            current_statement_begin__ = 104;
            if (as_bool(logical_eq(obs, 0))) {
                current_statement_begin__ = 105;
                stan::math::assign(has_obs, 0);
            } else {
                current_statement_begin__ = 107;
                stan::math::assign(has_obs, 1);
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 113;
            num_params_r__ += 1;
            current_statement_begin__ = 114;
            num_params_r__ += 1;
            current_statement_begin__ = 115;
            validate_non_negative_index("std_Rsig2", "(constr_Rsig2 ? 0 : 1 )", (constr_Rsig2 ? 0 : 1 ));
            num_params_r__ += (1 * (constr_Rsig2 ? 0 : 1 ));
            current_statement_begin__ = 116;
            validate_non_negative_index("std_Rmu", "(constr_Rmu ? 0 : 1 )", (constr_Rmu ? 0 : 1 ));
            num_params_r__ += (1 * (constr_Rmu ? 0 : 1 ));
            current_statement_begin__ = 117;
            num_params_r__ += 1;
            current_statement_begin__ = 118;
            validate_non_negative_index("raw_R", "(constr_Rsig2 ? 0 : e )", (constr_Rsig2 ? 0 : e ));
            num_params_r__ += (constr_Rsig2 ? 0 : e );
            current_statement_begin__ = 119;
            validate_non_negative_index("raw_X", "e", e);
            num_params_r__ += e;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_intravar_univar_corateBM() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 113;
        if (!(context__.contains_r("std_R0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable std_R0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("std_R0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "std_R0", "double", context__.to_vec());
        double std_R0(0);
        std_R0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(std_R0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable std_R0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 114;
        if (!(context__.contains_r("std_X0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable std_X0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("std_X0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "std_X0", "double", context__.to_vec());
        double std_X0(0);
        std_X0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(std_X0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable std_X0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 115;
        if (!(context__.contains_r("std_Rsig2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable std_Rsig2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("std_Rsig2");
        pos__ = 0U;
        validate_non_negative_index("std_Rsig2", "(constr_Rsig2 ? 0 : 1 )", (constr_Rsig2 ? 0 : 1 ));
        context__.validate_dims("parameter initialization", "std_Rsig2", "double", context__.to_vec((constr_Rsig2 ? 0 : 1 )));
        std::vector<double> std_Rsig2((constr_Rsig2 ? 0 : 1 ), double(0));
        size_t std_Rsig2_k_0_max__ = (constr_Rsig2 ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < std_Rsig2_k_0_max__; ++k_0__) {
            std_Rsig2[k_0__] = vals_r__[pos__++];
        }
        size_t std_Rsig2_i_0_max__ = (constr_Rsig2 ? 0 : 1 );
        for (size_t i_0__ = 0; i_0__ < std_Rsig2_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, std_Rsig2[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable std_Rsig2: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 116;
        if (!(context__.contains_r("std_Rmu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable std_Rmu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("std_Rmu");
        pos__ = 0U;
        validate_non_negative_index("std_Rmu", "(constr_Rmu ? 0 : 1 )", (constr_Rmu ? 0 : 1 ));
        context__.validate_dims("parameter initialization", "std_Rmu", "double", context__.to_vec((constr_Rmu ? 0 : 1 )));
        std::vector<double> std_Rmu((constr_Rmu ? 0 : 1 ), double(0));
        size_t std_Rmu_k_0_max__ = (constr_Rmu ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < std_Rmu_k_0_max__; ++k_0__) {
            std_Rmu[k_0__] = vals_r__[pos__++];
        }
        size_t std_Rmu_i_0_max__ = (constr_Rmu ? 0 : 1 );
        for (size_t i_0__ = 0; i_0__ < std_Rmu_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(std_Rmu[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable std_Rmu: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 117;
        if (!(context__.contains_r("std_Ysig2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable std_Ysig2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("std_Ysig2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "std_Ysig2", "double", context__.to_vec());
        double std_Ysig2(0);
        std_Ysig2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, std_Ysig2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable std_Ysig2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 118;
        if (!(context__.contains_r("raw_R")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable raw_R missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("raw_R");
        pos__ = 0U;
        validate_non_negative_index("raw_R", "(constr_Rsig2 ? 0 : e )", (constr_Rsig2 ? 0 : e ));
        context__.validate_dims("parameter initialization", "raw_R", "vector_d", context__.to_vec((constr_Rsig2 ? 0 : e )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> raw_R((constr_Rsig2 ? 0 : e ));
        size_t raw_R_j_1_max__ = (constr_Rsig2 ? 0 : e );
        for (size_t j_1__ = 0; j_1__ < raw_R_j_1_max__; ++j_1__) {
            raw_R(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(raw_R);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable raw_R: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 119;
        if (!(context__.contains_r("raw_X")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable raw_X missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("raw_X");
        pos__ = 0U;
        validate_non_negative_index("raw_X", "e", e);
        context__.validate_dims("parameter initialization", "raw_X", "vector_d", context__.to_vec(e));
        Eigen::Matrix<double, Eigen::Dynamic, 1> raw_X(e);
        size_t raw_X_j_1_max__ = e;
        for (size_t j_1__ = 0; j_1__ < raw_X_j_1_max__; ++j_1__) {
            raw_X(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(raw_X);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable raw_X: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 113;
            local_scalar_t__ std_R0;
            (void) std_R0;  // dummy to suppress unused var warning
            if (jacobian__)
                std_R0 = in__.scalar_constrain(lp__);
            else
                std_R0 = in__.scalar_constrain();
            current_statement_begin__ = 114;
            local_scalar_t__ std_X0;
            (void) std_X0;  // dummy to suppress unused var warning
            if (jacobian__)
                std_X0 = in__.scalar_constrain(lp__);
            else
                std_X0 = in__.scalar_constrain();
            current_statement_begin__ = 115;
            std::vector<local_scalar_t__> std_Rsig2;
            size_t std_Rsig2_d_0_max__ = (constr_Rsig2 ? 0 : 1 );
            std_Rsig2.reserve(std_Rsig2_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < std_Rsig2_d_0_max__; ++d_0__) {
                if (jacobian__)
                    std_Rsig2.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    std_Rsig2.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 116;
            std::vector<local_scalar_t__> std_Rmu;
            size_t std_Rmu_d_0_max__ = (constr_Rmu ? 0 : 1 );
            std_Rmu.reserve(std_Rmu_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < std_Rmu_d_0_max__; ++d_0__) {
                if (jacobian__)
                    std_Rmu.push_back(in__.scalar_constrain(lp__));
                else
                    std_Rmu.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 117;
            local_scalar_t__ std_Ysig2;
            (void) std_Ysig2;  // dummy to suppress unused var warning
            if (jacobian__)
                std_Ysig2 = in__.scalar_lb_constrain(0, lp__);
            else
                std_Ysig2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 118;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> raw_R;
            (void) raw_R;  // dummy to suppress unused var warning
            if (jacobian__)
                raw_R = in__.vector_constrain((constr_Rsig2 ? 0 : e ), lp__);
            else
                raw_R = in__.vector_constrain((constr_Rsig2 ? 0 : e ));
            current_statement_begin__ = 119;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> raw_X;
            (void) raw_X;  // dummy to suppress unused var warning
            if (jacobian__)
                raw_X = in__.vector_constrain(e, lp__);
            else
                raw_X = in__.vector_constrain(e);
            // transformed parameters
            current_statement_begin__ = 123;
            local_scalar_t__ R0;
            (void) R0;  // dummy to suppress unused var warning
            stan::math::initialize(R0, DUMMY_VAR__);
            stan::math::fill(R0, DUMMY_VAR__);
            current_statement_begin__ = 124;
            local_scalar_t__ X0;
            (void) X0;  // dummy to suppress unused var warning
            stan::math::initialize(X0, DUMMY_VAR__);
            stan::math::fill(X0, DUMMY_VAR__);
            current_statement_begin__ = 125;
            validate_non_negative_index("Rsig2", "(constr_Rsig2 ? 0 : 1 )", (constr_Rsig2 ? 0 : 1 ));
            std::vector<local_scalar_t__> Rsig2((constr_Rsig2 ? 0 : 1 ), local_scalar_t__(0));
            stan::math::initialize(Rsig2, DUMMY_VAR__);
            stan::math::fill(Rsig2, DUMMY_VAR__);
            current_statement_begin__ = 126;
            validate_non_negative_index("Rmu", "(constr_Rmu ? 0 : 1 )", (constr_Rmu ? 0 : 1 ));
            std::vector<local_scalar_t__> Rmu((constr_Rmu ? 0 : 1 ), local_scalar_t__(0));
            stan::math::initialize(Rmu, DUMMY_VAR__);
            stan::math::fill(Rmu, DUMMY_VAR__);
            current_statement_begin__ = 127;
            local_scalar_t__ Ysig2;
            (void) Ysig2;  // dummy to suppress unused var warning
            stan::math::initialize(Ysig2, DUMMY_VAR__);
            stan::math::fill(Ysig2, DUMMY_VAR__);
            current_statement_begin__ = 128;
            validate_non_negative_index("R", "e", e);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> R(e);
            stan::math::initialize(R, DUMMY_VAR__);
            stan::math::fill(R, DUMMY_VAR__);
            current_statement_begin__ = 129;
            validate_non_negative_index("X", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> X(n);
            stan::math::initialize(X, DUMMY_VAR__);
            stan::math::fill(X, DUMMY_VAR__);
            current_statement_begin__ = 130;
            validate_non_negative_index("cent_Y", "obs", obs);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> cent_Y(obs);
            stan::math::initialize(cent_Y, DUMMY_VAR__);
            stan::math::fill(cent_Y, DUMMY_VAR__);
            current_statement_begin__ = 131;
            validate_non_negative_index("trans_tp", "n_tp", n_tp);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> trans_tp(n_tp);
            stan::math::initialize(trans_tp, DUMMY_VAR__);
            stan::math::fill(trans_tp, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 135;
            stan::math::assign(R0, (R0_prior_mu + (R0_prior_sig * std_R0)));
            current_statement_begin__ = 136;
            stan::math::assign(X0, (X0_prior_mu + (X0_prior_sig * std_X0)));
            current_statement_begin__ = 137;
            if (as_bool(logical_negation(constr_Rsig2))) {
                current_statement_begin__ = 138;
                stan::model::assign(Rsig2, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            (Rsig2_prior * get_base1(std_Rsig2, 1, "std_Rsig2", 1)), 
                            "assigning variable Rsig2");
            }
            current_statement_begin__ = 140;
            if (as_bool(logical_negation(constr_Rmu))) {
                current_statement_begin__ = 141;
                stan::model::assign(Rmu, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            (Rmu_prior_mu + (Rmu_prior_sig * get_base1(std_Rmu, 1, "std_Rmu", 1))), 
                            "assigning variable Rmu");
            }
            current_statement_begin__ = 143;
            stan::math::assign(Ysig2, (Ysig2_prior * std_Ysig2));
            current_statement_begin__ = 148;
            stan::math::assign(R, rep_vector(R0, e));
            current_statement_begin__ = 149;
            if (as_bool(logical_negation(constr_Rmu))) {
                current_statement_begin__ = 150;
                stan::math::assign(R, add(subtract(subtract(R, stan::math::log(stan::math::fabs(get_base1(Rmu, 1, "Rmu", 1)))), stan::math::log(T_l)), stan::math::log(stan::math::fabs(subtract(stan::math::exp(multiply(get_base1(Rmu, 1, "Rmu", 1), T_2)), stan::math::exp(multiply(get_base1(Rmu, 1, "Rmu", 1), T_1)))))));
            }
            current_statement_begin__ = 152;
            if (as_bool(logical_negation(constr_Rsig2))) {
                current_statement_begin__ = 153;
                stan::math::assign(R, add(R, multiply(multiply(stan::math::sqrt(get_base1(Rsig2, 1, "Rsig2", 1)), chol_eV), raw_R)));
            }
            current_statement_begin__ = 158;
            stan::math::assign(X, get_X(n, X0, prune_T, R, raw_X, preorder, real_e, des_e, tip_e, pstream__));
            current_statement_begin__ = 162;
            if (as_bool(has_tp)) {
                current_statement_begin__ = 163;
                stan::math::assign(trans_tp, elt_divide(subtract(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_multi(which_tp), stan::model::nil_index_list()), "X"), tp_mu), tp_sig));
            }
            current_statement_begin__ = 168;
            if (as_bool((primitive_value(has_obs) && primitive_value(lik_pow_ind)))) {
                current_statement_begin__ = 169;
                stan::math::assign(cent_Y, subtract(Y, stan::model::rvalue(X, stan::model::cons_list(stan::model::index_multi(X_id), stan::model::nil_index_list()), "X")));
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 123;
            if (stan::math::is_uninitialized(R0)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: R0";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable R0: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 124;
            if (stan::math::is_uninitialized(X0)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: X0";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable X0: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 125;
            size_t Rsig2_k_0_max__ = (constr_Rsig2 ? 0 : 1 );
            for (size_t k_0__ = 0; k_0__ < Rsig2_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(Rsig2[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Rsig2" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Rsig2: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t Rsig2_i_0_max__ = (constr_Rsig2 ? 0 : 1 );
            for (size_t i_0__ = 0; i_0__ < Rsig2_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Rsig2[i_0__]", Rsig2[i_0__], 0);
            }
            current_statement_begin__ = 126;
            size_t Rmu_k_0_max__ = (constr_Rmu ? 0 : 1 );
            for (size_t k_0__ = 0; k_0__ < Rmu_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(Rmu[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Rmu" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Rmu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 127;
            if (stan::math::is_uninitialized(Ysig2)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Ysig2";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Ysig2: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "Ysig2", Ysig2, 0);
            current_statement_begin__ = 128;
            size_t R_j_1_max__ = e;
            for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(R(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: R" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable R: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 129;
            size_t X_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(X(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: X" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable X: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 130;
            size_t cent_Y_j_1_max__ = obs;
            for (size_t j_1__ = 0; j_1__ < cent_Y_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(cent_Y(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: cent_Y" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable cent_Y: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 131;
            size_t trans_tp_j_1_max__ = n_tp;
            for (size_t j_1__ = 0; j_1__ < trans_tp_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(trans_tp(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: trans_tp" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable trans_tp: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 175;
            lp_accum__.add(std_normal_log<propto__>(std_R0));
            current_statement_begin__ = 176;
            lp_accum__.add(std_normal_log<propto__>(std_X0));
            current_statement_begin__ = 177;
            if (as_bool(logical_negation(constr_Rsig2))) {
                current_statement_begin__ = 178;
                lp_accum__.add(std_normal_log<propto__>(get_base1(std_Rsig2, 1, "std_Rsig2", 1)));
            }
            current_statement_begin__ = 180;
            if (as_bool(logical_negation(constr_Rmu))) {
                current_statement_begin__ = 181;
                lp_accum__.add(std_normal_log<propto__>(get_base1(std_Rmu, 1, "std_Rmu", 1)));
            }
            current_statement_begin__ = 183;
            lp_accum__.add(std_normal_log<propto__>(std_Ysig2));
            current_statement_begin__ = 187;
            if (as_bool(logical_negation(constr_Rsig2))) {
                current_statement_begin__ = 188;
                lp_accum__.add(std_normal_log<propto__>(raw_R));
            }
            current_statement_begin__ = 193;
            lp_accum__.add(std_normal_log<propto__>(raw_X));
            current_statement_begin__ = 198;
            if (as_bool(has_tp)) {
                current_statement_begin__ = 199;
                lp_accum__.add((-(0.5) * dot_self(trans_tp)));
            }
            current_statement_begin__ = 204;
            if (as_bool(lik_pow_ind)) {
                current_statement_begin__ = 206;
                if (as_bool(has_obs)) {
                    current_statement_begin__ = 207;
                    lp_accum__.add(((-(0.5) * lik_power) * ((obs * stan::math::log(Ysig2)) + (dot_self(cent_Y) / Ysig2))));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("std_R0");
        names__.push_back("std_X0");
        names__.push_back("std_Rsig2");
        names__.push_back("std_Rmu");
        names__.push_back("std_Ysig2");
        names__.push_back("raw_R");
        names__.push_back("raw_X");
        names__.push_back("R0");
        names__.push_back("X0");
        names__.push_back("Rsig2");
        names__.push_back("Rmu");
        names__.push_back("Ysig2");
        names__.push_back("R");
        names__.push_back("X");
        names__.push_back("cent_Y");
        names__.push_back("trans_tp");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((constr_Rsig2 ? 0 : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((constr_Rmu ? 0 : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((constr_Rsig2 ? 0 : e ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(e);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((constr_Rsig2 ? 0 : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((constr_Rmu ? 0 : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(e);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(obs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_tp);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_intravar_univar_corateBM_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double std_R0 = in__.scalar_constrain();
        vars__.push_back(std_R0);
        double std_X0 = in__.scalar_constrain();
        vars__.push_back(std_X0);
        std::vector<double> std_Rsig2;
        size_t std_Rsig2_d_0_max__ = (constr_Rsig2 ? 0 : 1 );
        std_Rsig2.reserve(std_Rsig2_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < std_Rsig2_d_0_max__; ++d_0__) {
            std_Rsig2.push_back(in__.scalar_lb_constrain(0));
        }
        size_t std_Rsig2_k_0_max__ = (constr_Rsig2 ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < std_Rsig2_k_0_max__; ++k_0__) {
            vars__.push_back(std_Rsig2[k_0__]);
        }
        std::vector<double> std_Rmu;
        size_t std_Rmu_d_0_max__ = (constr_Rmu ? 0 : 1 );
        std_Rmu.reserve(std_Rmu_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < std_Rmu_d_0_max__; ++d_0__) {
            std_Rmu.push_back(in__.scalar_constrain());
        }
        size_t std_Rmu_k_0_max__ = (constr_Rmu ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < std_Rmu_k_0_max__; ++k_0__) {
            vars__.push_back(std_Rmu[k_0__]);
        }
        double std_Ysig2 = in__.scalar_lb_constrain(0);
        vars__.push_back(std_Ysig2);
        Eigen::Matrix<double, Eigen::Dynamic, 1> raw_R = in__.vector_constrain((constr_Rsig2 ? 0 : e ));
        size_t raw_R_j_1_max__ = (constr_Rsig2 ? 0 : e );
        for (size_t j_1__ = 0; j_1__ < raw_R_j_1_max__; ++j_1__) {
            vars__.push_back(raw_R(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> raw_X = in__.vector_constrain(e);
        size_t raw_X_j_1_max__ = e;
        for (size_t j_1__ = 0; j_1__ < raw_X_j_1_max__; ++j_1__) {
            vars__.push_back(raw_X(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 123;
            double R0;
            (void) R0;  // dummy to suppress unused var warning
            stan::math::initialize(R0, DUMMY_VAR__);
            stan::math::fill(R0, DUMMY_VAR__);
            current_statement_begin__ = 124;
            double X0;
            (void) X0;  // dummy to suppress unused var warning
            stan::math::initialize(X0, DUMMY_VAR__);
            stan::math::fill(X0, DUMMY_VAR__);
            current_statement_begin__ = 125;
            validate_non_negative_index("Rsig2", "(constr_Rsig2 ? 0 : 1 )", (constr_Rsig2 ? 0 : 1 ));
            std::vector<double> Rsig2((constr_Rsig2 ? 0 : 1 ), double(0));
            stan::math::initialize(Rsig2, DUMMY_VAR__);
            stan::math::fill(Rsig2, DUMMY_VAR__);
            current_statement_begin__ = 126;
            validate_non_negative_index("Rmu", "(constr_Rmu ? 0 : 1 )", (constr_Rmu ? 0 : 1 ));
            std::vector<double> Rmu((constr_Rmu ? 0 : 1 ), double(0));
            stan::math::initialize(Rmu, DUMMY_VAR__);
            stan::math::fill(Rmu, DUMMY_VAR__);
            current_statement_begin__ = 127;
            double Ysig2;
            (void) Ysig2;  // dummy to suppress unused var warning
            stan::math::initialize(Ysig2, DUMMY_VAR__);
            stan::math::fill(Ysig2, DUMMY_VAR__);
            current_statement_begin__ = 128;
            validate_non_negative_index("R", "e", e);
            Eigen::Matrix<double, Eigen::Dynamic, 1> R(e);
            stan::math::initialize(R, DUMMY_VAR__);
            stan::math::fill(R, DUMMY_VAR__);
            current_statement_begin__ = 129;
            validate_non_negative_index("X", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> X(n);
            stan::math::initialize(X, DUMMY_VAR__);
            stan::math::fill(X, DUMMY_VAR__);
            current_statement_begin__ = 130;
            validate_non_negative_index("cent_Y", "obs", obs);
            Eigen::Matrix<double, Eigen::Dynamic, 1> cent_Y(obs);
            stan::math::initialize(cent_Y, DUMMY_VAR__);
            stan::math::fill(cent_Y, DUMMY_VAR__);
            current_statement_begin__ = 131;
            validate_non_negative_index("trans_tp", "n_tp", n_tp);
            Eigen::Matrix<double, Eigen::Dynamic, 1> trans_tp(n_tp);
            stan::math::initialize(trans_tp, DUMMY_VAR__);
            stan::math::fill(trans_tp, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 135;
            stan::math::assign(R0, (R0_prior_mu + (R0_prior_sig * std_R0)));
            current_statement_begin__ = 136;
            stan::math::assign(X0, (X0_prior_mu + (X0_prior_sig * std_X0)));
            current_statement_begin__ = 137;
            if (as_bool(logical_negation(constr_Rsig2))) {
                current_statement_begin__ = 138;
                stan::model::assign(Rsig2, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            (Rsig2_prior * get_base1(std_Rsig2, 1, "std_Rsig2", 1)), 
                            "assigning variable Rsig2");
            }
            current_statement_begin__ = 140;
            if (as_bool(logical_negation(constr_Rmu))) {
                current_statement_begin__ = 141;
                stan::model::assign(Rmu, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            (Rmu_prior_mu + (Rmu_prior_sig * get_base1(std_Rmu, 1, "std_Rmu", 1))), 
                            "assigning variable Rmu");
            }
            current_statement_begin__ = 143;
            stan::math::assign(Ysig2, (Ysig2_prior * std_Ysig2));
            current_statement_begin__ = 148;
            stan::math::assign(R, rep_vector(R0, e));
            current_statement_begin__ = 149;
            if (as_bool(logical_negation(constr_Rmu))) {
                current_statement_begin__ = 150;
                stan::math::assign(R, add(subtract(subtract(R, stan::math::log(stan::math::fabs(get_base1(Rmu, 1, "Rmu", 1)))), stan::math::log(T_l)), stan::math::log(stan::math::fabs(subtract(stan::math::exp(multiply(get_base1(Rmu, 1, "Rmu", 1), T_2)), stan::math::exp(multiply(get_base1(Rmu, 1, "Rmu", 1), T_1)))))));
            }
            current_statement_begin__ = 152;
            if (as_bool(logical_negation(constr_Rsig2))) {
                current_statement_begin__ = 153;
                stan::math::assign(R, add(R, multiply(multiply(stan::math::sqrt(get_base1(Rsig2, 1, "Rsig2", 1)), chol_eV), raw_R)));
            }
            current_statement_begin__ = 158;
            stan::math::assign(X, get_X(n, X0, prune_T, R, raw_X, preorder, real_e, des_e, tip_e, pstream__));
            current_statement_begin__ = 162;
            if (as_bool(has_tp)) {
                current_statement_begin__ = 163;
                stan::math::assign(trans_tp, elt_divide(subtract(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_multi(which_tp), stan::model::nil_index_list()), "X"), tp_mu), tp_sig));
            }
            current_statement_begin__ = 168;
            if (as_bool((primitive_value(has_obs) && primitive_value(lik_pow_ind)))) {
                current_statement_begin__ = 169;
                stan::math::assign(cent_Y, subtract(Y, stan::model::rvalue(X, stan::model::cons_list(stan::model::index_multi(X_id), stan::model::nil_index_list()), "X")));
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 125;
            size_t Rsig2_i_0_max__ = (constr_Rsig2 ? 0 : 1 );
            for (size_t i_0__ = 0; i_0__ < Rsig2_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Rsig2[i_0__]", Rsig2[i_0__], 0);
            }
            current_statement_begin__ = 127;
            check_greater_or_equal(function__, "Ysig2", Ysig2, 0);
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(R0);
                vars__.push_back(X0);
                size_t Rsig2_k_0_max__ = (constr_Rsig2 ? 0 : 1 );
                for (size_t k_0__ = 0; k_0__ < Rsig2_k_0_max__; ++k_0__) {
                    vars__.push_back(Rsig2[k_0__]);
                }
                size_t Rmu_k_0_max__ = (constr_Rmu ? 0 : 1 );
                for (size_t k_0__ = 0; k_0__ < Rmu_k_0_max__; ++k_0__) {
                    vars__.push_back(Rmu[k_0__]);
                }
                vars__.push_back(Ysig2);
                size_t R_j_1_max__ = e;
                for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                    vars__.push_back(R(j_1__));
                }
                size_t X_j_1_max__ = n;
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    vars__.push_back(X(j_1__));
                }
                size_t cent_Y_j_1_max__ = obs;
                for (size_t j_1__ = 0; j_1__ < cent_Y_j_1_max__; ++j_1__) {
                    vars__.push_back(cent_Y(j_1__));
                }
                size_t trans_tp_j_1_max__ = n_tp;
                for (size_t j_1__ = 0; j_1__ < trans_tp_j_1_max__; ++j_1__) {
                    vars__.push_back(trans_tp(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_intravar_univar_corateBM";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "std_R0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "std_X0";
        param_names__.push_back(param_name_stream__.str());
        size_t std_Rsig2_k_0_max__ = (constr_Rsig2 ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < std_Rsig2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "std_Rsig2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t std_Rmu_k_0_max__ = (constr_Rmu ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < std_Rmu_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "std_Rmu" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "std_Ysig2";
        param_names__.push_back(param_name_stream__.str());
        size_t raw_R_j_1_max__ = (constr_Rsig2 ? 0 : e );
        for (size_t j_1__ = 0; j_1__ < raw_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "raw_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t raw_X_j_1_max__ = e;
        for (size_t j_1__ = 0; j_1__ < raw_X_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "raw_X" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R0";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "X0";
            param_names__.push_back(param_name_stream__.str());
            size_t Rsig2_k_0_max__ = (constr_Rsig2 ? 0 : 1 );
            for (size_t k_0__ = 0; k_0__ < Rsig2_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rsig2" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Rmu_k_0_max__ = (constr_Rmu ? 0 : 1 );
            for (size_t k_0__ = 0; k_0__ < Rmu_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rmu" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "Ysig2";
            param_names__.push_back(param_name_stream__.str());
            size_t R_j_1_max__ = e;
            for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t X_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "X" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t cent_Y_j_1_max__ = obs;
            for (size_t j_1__ = 0; j_1__ < cent_Y_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cent_Y" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t trans_tp_j_1_max__ = n_tp;
            for (size_t j_1__ = 0; j_1__ < trans_tp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "trans_tp" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "std_R0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "std_X0";
        param_names__.push_back(param_name_stream__.str());
        size_t std_Rsig2_k_0_max__ = (constr_Rsig2 ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < std_Rsig2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "std_Rsig2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t std_Rmu_k_0_max__ = (constr_Rmu ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < std_Rmu_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "std_Rmu" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "std_Ysig2";
        param_names__.push_back(param_name_stream__.str());
        size_t raw_R_j_1_max__ = (constr_Rsig2 ? 0 : e );
        for (size_t j_1__ = 0; j_1__ < raw_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "raw_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t raw_X_j_1_max__ = e;
        for (size_t j_1__ = 0; j_1__ < raw_X_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "raw_X" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R0";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "X0";
            param_names__.push_back(param_name_stream__.str());
            size_t Rsig2_k_0_max__ = (constr_Rsig2 ? 0 : 1 );
            for (size_t k_0__ = 0; k_0__ < Rsig2_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rsig2" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Rmu_k_0_max__ = (constr_Rmu ? 0 : 1 );
            for (size_t k_0__ = 0; k_0__ < Rmu_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rmu" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "Ysig2";
            param_names__.push_back(param_name_stream__.str());
            size_t R_j_1_max__ = e;
            for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t X_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "X" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t cent_Y_j_1_max__ = obs;
            for (size_t j_1__ = 0; j_1__ < cent_Y_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cent_Y" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t trans_tp_j_1_max__ = n_tp;
            for (size_t j_1__ = 0; j_1__ < trans_tp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "trans_tp" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_intravar_univar_corateBM_namespace::model_intravar_univar_corateBM stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
