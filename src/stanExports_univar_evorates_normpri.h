// Generated by rstantools.  Do not edit by hand.

/*
    contSimmap is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    contSimmap is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with contSimmap.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-1-g67504470
#include <stan/model/model_header.hpp>
namespace model_univar_evorates_normpri_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 179, column 2 to column 14)",
                                                      " (in 'string', line 180, column 2 to column 58)",
                                                      " (in 'string', line 181, column 2 to column 60)",
                                                      " (in 'string', line 182, column 2 to column 33)",
                                                      " (in 'string', line 183, column 2 to column 35)",
                                                      " (in 'string', line 186, column 2 to column 10)",
                                                      " (in 'string', line 187, column 2 to column 31)",
                                                      " (in 'string', line 188, column 2 to column 15)",
                                                      " (in 'string', line 189, column 2 to column 42)",
                                                      " (in 'string', line 190, column 2 to column 29)",
                                                      " (in 'string', line 191, column 2 to column 14)",
                                                      " (in 'string', line 192, column 2 to column 15)",
                                                      " (in 'string', line 193, column 2 to column 19)",
                                                      " (in 'string', line 197, column 2 to column 43)",
                                                      " (in 'string', line 199, column 4 to column 51)",
                                                      " (in 'string', line 198, column 16 to line 200, column 3)",
                                                      " (in 'string', line 198, column 2 to line 200, column 3)",
                                                      " (in 'string', line 202, column 3 to column 50)",
                                                      " (in 'string', line 201, column 18 to line 203, column 2)",
                                                      " (in 'string', line 201, column 1 to line 203, column 2)",
                                                      " (in 'string', line 205, column 3 to column 54)",
                                                      " (in 'string', line 204, column 16 to line 206, column 2)",
                                                      " (in 'string', line 204, column 1 to line 206, column 2)",
                                                      " (in 'string', line 212, column 2 to column 24)",
                                                      " (in 'string', line 214, column 4 to column 92)",
                                                      " (in 'string', line 213, column 17 to line 215, column 3)",
                                                      " (in 'string', line 213, column 2 to line 215, column 3)",
                                                      " (in 'string', line 216, column 2 to column 13)",
                                                      " (in 'string', line 218, column 4 to column 45)",
                                                      " (in 'string', line 217, column 19 to line 219, column 3)",
                                                      " (in 'string', line 217, column 2 to line 219, column 3)",
                                                      " (in 'string', line 223, column 1 to column 66)",
                                                      " (in 'string', line 232, column 3 to column 15)",
                                                      " (in 'string', line 231, column 6 to line 233, column 2)",
                                                      " (in 'string', line 225, column 3 to line 227, column 30)",
                                                      " (in 'string', line 229, column 6 to column 84)",
                                                      " (in 'string', line 228, column 18 to line 230, column 5)",
                                                      " (in 'string', line 228, column 4 to line 230, column 5)",
                                                      " (in 'string', line 224, column 16 to line 231, column 2)",
                                                      " (in 'string', line 224, column 1 to line 233, column 2)",
                                                      " (in 'string', line 253, column 2 to column 11)",
                                                      " (in 'string', line 254, column 2 to column 13)",
                                                      " (in 'string', line 260, column 3 to line 262, column 38)",
                                                      " (in 'string', line 264, column 6 to column 80)",
                                                      " (in 'string', line 263, column 18 to line 265, column 5)",
                                                      " (in 'string', line 263, column 4 to line 265, column 5)",
                                                      " (in 'string', line 259, column 7 to line 266, column 3)",
                                                      " (in 'string', line 258, column 4 to column 30)",
                                                      " (in 'string', line 257, column 17 to line 259, column 3)",
                                                      " (in 'string', line 257, column 2 to line 266, column 3)",
                                                      " (in 'string', line 269, column 2 to column 54)",
                                                      " (in 'string', line 271, column 4 to column 62)",
                                                      " (in 'string', line 270, column 16 to line 272, column 3)",
                                                      " (in 'string', line 270, column 2 to line 272, column 3)",
                                                      " (in 'string', line 274, column 4 to column 65)",
                                                      " (in 'string', line 275, column 4 to column 78)",
                                                      " (in 'string', line 273, column 19 to line 276, column 3)",
                                                      " (in 'string', line 273, column 2 to line 276, column 3)",
                                                      " (in 'string', line 278, column 4 to column 63)",
                                                      " (in 'string', line 277, column 17 to line 279, column 3)",
                                                      " (in 'string', line 277, column 2 to line 279, column 3)",
                                                      " (in 'string', line 237, column 2 to column 24)",
                                                      " (in 'string', line 239, column 4 to column 30)",
                                                      " (in 'string', line 238, column 17 to line 240, column 3)",
                                                      " (in 'string', line 238, column 2 to line 240, column 3)",
                                                      " (in 'string', line 245, column 3 to column 24)",
                                                      " (in 'string', line 244, column 18 to line 246, column 2)",
                                                      " (in 'string', line 244, column 1 to line 246, column 2)",
                                                      " (in 'string', line 250, column 1 to column 31)",
                                                      " (in 'string', line 60, column 2 to column 8)",
                                                      " (in 'string', line 61, column 2 to column 8)",
                                                      " (in 'string', line 62, column 9 to column 10)",
                                                      " (in 'string', line 62, column 12 to column 13)",
                                                      " (in 'string', line 62, column 2 to column 18)",
                                                      " (in 'string', line 63, column 9 to column 18)",
                                                      " (in 'string', line 63, column 2 to column 28)",
                                                      " (in 'string', line 64, column 12 to column 21)",
                                                      " (in 'string', line 64, column 2 to column 26)",
                                                      " (in 'string', line 65, column 12 to column 13)",
                                                      " (in 'string', line 65, column 2 to column 15)",
                                                      " (in 'string', line 66, column 13 to column 14)",
                                                      " (in 'string', line 66, column 2 to column 16)",
                                                      " (in 'string', line 67, column 16 to column 21)",
                                                      " (in 'string', line 67, column 2 to column 23)",
                                                      " (in 'string', line 76, column 15 to column 20)",
                                                      " (in 'string', line 76, column 2 to column 22)",
                                                      " (in 'string', line 77, column 2 to column 14)",
                                                      " (in 'string', line 78, column 2 to column 14)",
                                                      " (in 'string', line 79, column 20 to column 27)",
                                                      " (in 'string', line 79, column 2 to column 29)",
                                                      " (in 'string', line 83, column 9 to column 10)",
                                                      " (in 'string', line 83, column 2 to column 14)",
                                                      " (in 'string', line 84, column 9 to column 10)",
                                                      " (in 'string', line 84, column 2 to column 17)",
                                                      " (in 'string', line 85, column 9 to column 10)",
                                                      " (in 'string', line 85, column 2 to column 22)",
                                                      " (in 'string', line 86, column 2 to column 15)",
                                                      " (in 'string', line 87, column 9 to column 17)",
                                                      " (in 'string', line 87, column 2 to column 26)",
                                                      " (in 'string', line 88, column 9 to column 17)",
                                                      " (in 'string', line 88, column 2 to column 30)",
                                                      " (in 'string', line 105, column 2 to column 15)",
                                                      " (in 'string', line 106, column 19 to column 27)",
                                                      " (in 'string', line 106, column 2 to column 29)",
                                                      " (in 'string', line 110, column 2 to column 19)",
                                                      " (in 'string', line 111, column 2 to column 20)",
                                                      " (in 'string', line 112, column 2 to column 23)",
                                                      " (in 'string', line 113, column 2 to column 23)",
                                                      " (in 'string', line 114, column 2 to column 20)",
                                                      " (in 'string', line 115, column 2 to column 21)",
                                                      " (in 'string', line 119, column 1 to column 18)",
                                                      " (in 'string', line 120, column 1 to column 16)",
                                                      " (in 'string', line 124, column 1 to column 16)",
                                                      " (in 'string', line 127, column 2 to column 17)",
                                                      " (in 'string', line 128, column 2 to column 17)",
                                                      " (in 'string', line 129, column 2 to column 27)",
                                                      " (in 'string', line 130, column 9 to column 27)",
                                                      " (in 'string', line 130, column 29 to column 47)",
                                                      " (in 'string', line 130, column 2 to column 57)",
                                                      " (in 'string', line 131, column 9 to column 25)",
                                                      " (in 'string', line 131, column 2 to column 31)",
                                                      " (in 'string', line 132, column 9 to column 25)",
                                                      " (in 'string', line 132, column 2 to column 31)",
                                                      " (in 'string', line 133, column 9 to column 25)",
                                                      " (in 'string', line 133, column 2 to column 31)",
                                                      " (in 'string', line 134, column 2 to column 18)",
                                                      " (in 'string', line 135, column 2 to column 17)",
                                                      " (in 'string', line 141, column 4 to column 19)",
                                                      " (in 'string', line 140, column 7 to line 142, column 3)",
                                                      " (in 'string', line 139, column 4 to column 19)",
                                                      " (in 'string', line 138, column 19 to line 140, column 3)",
                                                      " (in 'string', line 138, column 2 to line 142, column 3)",
                                                      " (in 'string', line 149, column 4 to column 19)",
                                                      " (in 'string', line 150, column 4 to column 63)",
                                                      " (in 'string', line 148, column 7 to line 151, column 3)",
                                                      " (in 'string', line 147, column 4 to column 19)",
                                                      " (in 'string', line 146, column 19 to line 148, column 3)",
                                                      " (in 'string', line 146, column 2 to line 151, column 3)",
                                                      " (in 'string', line 156, column 4 to column 37)",
                                                      " (in 'string', line 155, column 19 to line 157, column 3)",
                                                      " (in 'string', line 155, column 2 to line 157, column 3)",
                                                      " (in 'string', line 159, column 4 to column 26)",
                                                      " (in 'string', line 160, column 4 to column 45)",
                                                      " (in 'string', line 161, column 4 to column 49)",
                                                      " (in 'string', line 158, column 17 to line 162, column 3)",
                                                      " (in 'string', line 158, column 2 to line 162, column 3)",
                                                      " (in 'string', line 168, column 4 to column 20)",
                                                      " (in 'string', line 167, column 7 to line 169, column 3)",
                                                      " (in 'string', line 166, column 4 to column 20)",
                                                      " (in 'string', line 165, column 20 to line 167, column 3)",
                                                      " (in 'string', line 165, column 2 to line 169, column 3)",
                                                      " (in 'string', line 172, column 2 to column 47)",
                                                      " (in 'string', line 174, column 4 to column 74)",
                                                      " (in 'string', line 173, column 16 to line 175, column 3)",
                                                      " (in 'string', line 173, column 2 to line 175, column 3)",
                                                      " (in 'string', line 180, column 40 to column 56)",
                                                      " (in 'string', line 181, column 40 to column 58)",
                                                      " (in 'string', line 182, column 15 to column 31)",
                                                      " (in 'string', line 183, column 9 to column 27)",
                                                      " (in 'string', line 187, column 13 to column 29)",
                                                      " (in 'string', line 188, column 9 to column 10)",
                                                      " (in 'string', line 189, column 22 to column 40)",
                                                      " (in 'string', line 190, column 11 to column 27)",
                                                      " (in 'string', line 191, column 9 to column 10)",
                                                      " (in 'string', line 193, column 9 to column 10)",
                                                      " (in 'string', line 4, column 11 to column 12)",
                                                      " (in 'string', line 4, column 4 to column 17)",
                                                      " (in 'string', line 5, column 4 to column 14)",
                                                      " (in 'string', line 7, column 6 to column 60)",
                                                      " (in 'string', line 6, column 18 to line 8, column 5)",
                                                      " (in 'string', line 6, column 4 to line 8, column 5)",
                                                      " (in 'string', line 9, column 4 to column 15)",
                                                      " (in 'string', line 3, column 104 to line 10, column 3)",
                                                      " (in 'string', line 15, column 10 to column 19)",
                                                      " (in 'string', line 15, column 3 to column 24)",
                                                      " (in 'string', line 16, column 11 to column 20)",
                                                      " (in 'string', line 16, column 4 to column 25)",
                                                      " (in 'string', line 17, column 11 to column 20)",
                                                      " (in 'string', line 17, column 4 to column 25)",
                                                      " (in 'string', line 18, column 11 to column 16)",
                                                      " (in 'string', line 18, column 4 to column 21)",
                                                      " (in 'string', line 19, column 4 to column 16)",
                                                      " (in 'string', line 20, column 4 to column 24)",
                                                      " (in 'string', line 21, column 4 to column 20)",
                                                      " (in 'string', line 22, column 4 to column 20)",
                                                      " (in 'string', line 23, column 4 to column 19)",
                                                      " (in 'string', line 24, column 3 to column 33)",
                                                      " (in 'string', line 25, column 3 to column 42)",
                                                      " (in 'string', line 26, column 4 to column 18)",
                                                      " (in 'string', line 27, column 4 to column 19)",
                                                      " (in 'string', line 28, column 4 to column 16)",
                                                      " (in 'string', line 29, column 4 to column 24)",
                                                      " (in 'string', line 30, column 4 to line 54, column 5)",
                                                      " (in 'string', line 31, column 6 to column 29)",
                                                      " (in 'string', line 32, column 6 to column 46)",
                                                      " (in 'string', line 33, column 6 to column 28)",
                                                      " (in 'string', line 50, column 8 to column 24)",
                                                      " (in 'string', line 51, column 8 to column 18)",
                                                      " (in 'string', line 52, column 8 to column 19)",
                                                      " (in 'string', line 49, column 38 to line 53, column 7)",
                                                      " (in 'string', line 49, column 12 to line 53, column 7)",
                                                      " (in 'string', line 45, column 8 to column 24)",
                                                      " (in 'string', line 46, column 8 to column 46)",
                                                      " (in 'string', line 47, column 8 to column 54)",
                                                      " (in 'string', line 48, column 8 to column 54)",
                                                      " (in 'string', line 44, column 38 to line 49, column 7)",
                                                      " (in 'string', line 44, column 12 to line 53, column 7)",
                                                      " (in 'string', line 35, column 8 to column 31)",
                                                      " (in 'string', line 36, column 8 to column 75)",
                                                      " (in 'string', line 37, column 8 to column 82)",
                                                      " (in 'string', line 42, column 10 to column 52)",
                                                      " (in 'string', line 41, column 13 to line 43, column 9)",
                                                      " (in 'string', line 40, column 10 to column 20)",
                                                      " (in 'string', line 39, column 42 to line 41, column 9)",
                                                      " (in 'string', line 39, column 8 to line 43, column 9)",
                                                      " (in 'string', line 34, column 32 to line 44, column 7)",
                                                      " (in 'string', line 34, column 6 to line 53, column 7)",
                                                      " (in 'string', line 55, column 3 to column 26)",
                                                      " (in 'string', line 14, column 43 to line 56, column 3)"};
template <typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T1__>, stan::value_type_t<T2__>,
T3__>, -1, 1>
get_SE(const int& n, const T1__& p_SE_arg__, const T2__& inv_n_obs_arg__,
       const std::vector<T3__>& Ysig2, const std::vector<int>& which_mis_SE,
       const int& has_mis_SE, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          T3__>;
  const auto& p_SE = to_ref(p_SE_arg__);
  const auto& inv_n_obs = to_ref(inv_n_obs_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 166;
    validate_non_negative_index("SE", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> SE;
    SE = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(SE, DUMMY_VAR__);
    
    current_statement__ = 168;
    assign(SE, nil_index_list(), p_SE, "assigning variable SE");
    current_statement__ = 171;
    if (has_mis_SE) {
      current_statement__ = 169;
      assign(SE, cons_list(index_multi(which_mis_SE), nil_index_list()),
        multiply(
          rvalue(inv_n_obs,
            cons_list(index_multi(which_mis_SE), nil_index_list()),
            "inv_n_obs"), Ysig2[(1 - 1)]), "assigning variable SE");
    } 
    current_statement__ = 172;
    return SE;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct get_SE_functor__ {
template <typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T1__>, stan::value_type_t<T2__>,
T3__>, -1, 1>
operator()(const int& n, const T1__& p_SE, const T2__& inv_n_obs,
           const std::vector<T3__>& Ysig2,
           const std::vector<int>& which_mis_SE, const int& has_mis_SE,
           std::ostream* pstream__)  const 
{
return get_SE(n, p_SE, inv_n_obs, Ysig2, which_mis_SE, has_mis_SE, pstream__);
}
};
template <typename T1__, typename T8__, typename T9__, typename T10__>
stan::promote_args_t<stan::value_type_t<T1__>, stan::value_type_t<T8__>,
stan::value_type_t<T9__>,
stan::value_type_t<T10__>>
prune(const int& n, const T1__& prune_T_arg__,
      const std::vector<std::vector<int>>& des_e,
      const std::vector<int>& tip_e, const std::vector<int>& real_e,
      const std::vector<int>& postorder, const std::vector<int>& mis_code,
      const std::vector<int>& which_non_mis, const T8__& X_arg__,
      const T9__& SE_arg__, const T10__& R_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T1__>,
          stan::value_type_t<T8__>,
          stan::value_type_t<T9__>,
          stan::value_type_t<T10__>>;
  const auto& prune_T = to_ref(prune_T_arg__);
  const auto& X = to_ref(X_arg__);
  const auto& SE = to_ref(SE_arg__);
  const auto& R = to_ref(R_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 174;
    validate_non_negative_index("SS", "2 * n - 1", ((2 * n) - 1));
    Eigen::Matrix<local_scalar_t__, -1, 1> SS;
    SS = Eigen::Matrix<local_scalar_t__, -1, 1>(((2 * n) - 1));
    stan::math::fill(SS, DUMMY_VAR__);
    
    current_statement__ = 176;
    validate_non_negative_index("XX", "2 * n - 1", ((2 * n) - 1));
    Eigen::Matrix<local_scalar_t__, -1, 1> XX;
    XX = Eigen::Matrix<local_scalar_t__, -1, 1>(((2 * n) - 1));
    stan::math::fill(XX, DUMMY_VAR__);
    
    current_statement__ = 178;
    validate_non_negative_index("VV", "2 * n - 1", ((2 * n) - 1));
    Eigen::Matrix<local_scalar_t__, -1, 1> VV;
    VV = Eigen::Matrix<local_scalar_t__, -1, 1>(((2 * n) - 1));
    stan::math::fill(VV, DUMMY_VAR__);
    
    current_statement__ = 180;
    validate_non_negative_index("LL", "n - 1", (n - 1));
    Eigen::Matrix<local_scalar_t__, -1, 1> LL;
    LL = Eigen::Matrix<local_scalar_t__, -1, 1>((n - 1));
    stan::math::fill(LL, DUMMY_VAR__);
    
    int counter;
    counter = std::numeric_limits<int>::min();
    
    int counter_non_mis;
    counter_non_mis = std::numeric_limits<int>::min();
    
    Eigen::Matrix<local_scalar_t__, -1, 1> des_X;
    des_X = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(des_X, DUMMY_VAR__);
    
    Eigen::Matrix<local_scalar_t__, -1, 1> des_V;
    des_V = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(des_V, DUMMY_VAR__);
    
    local_scalar_t__ sum_des_V;
    sum_des_V = DUMMY_VAR__;
    
    current_statement__ = 187;
    assign(SS, nil_index_list(), rep_vector(0, ((2 * n) - 1)),
      "assigning variable SS");
    current_statement__ = 188;
    assign(SS, cons_list(index_multi(real_e), nil_index_list()),
      elt_multiply(
        rvalue(prune_T, cons_list(index_multi(real_e), nil_index_list()),
          "prune_T"), stan::math::exp(R)), "assigning variable SS");
    current_statement__ = 189;
    assign(XX, cons_list(index_multi(tip_e), nil_index_list()), X,
      "assigning variable XX");
    current_statement__ = 190;
    assign(VV, cons_list(index_multi(tip_e), nil_index_list()), SE,
      "assigning variable VV");
    current_statement__ = 191;
    counter = 0;
    current_statement__ = 192;
    counter_non_mis = 0;
    current_statement__ = 193;
    for (int sym1__ = 1; sym1__ <= stan::math::size(postorder); ++sym1__) {
      {
        int i;
        current_statement__ = 193;
        i = postorder[(sym1__ - 1)];
        current_statement__ = 194;
        assign(des_X, nil_index_list(),
          rvalue(XX,
            cons_list(
              index_multi(rvalue(des_e,
                            cons_list(index_uni(i),
                              cons_list(index_omni(), nil_index_list())),
                            "des_e")), nil_index_list()), "XX"),
          "assigning variable des_X");
        current_statement__ = 195;
        assign(des_V, nil_index_list(),
          add(
            rvalue(VV,
              cons_list(
                index_multi(rvalue(des_e,
                              cons_list(index_uni(i),
                                cons_list(index_omni(), nil_index_list())),
                              "des_e")), nil_index_list()), "VV"),
            rvalue(SS,
              cons_list(
                index_multi(rvalue(des_e,
                              cons_list(index_uni(i),
                                cons_list(index_omni(), nil_index_list())),
                              "des_e")), nil_index_list()), "SS")),
          "assigning variable des_V");
        current_statement__ = 196;
        counter = (counter + 1);
        current_statement__ = 217;
        if (logical_eq(mis_code[(counter - 1)], 2)) {
          current_statement__ = 208;
          sum_des_V = sum(des_V);
          current_statement__ = 209;
          assign(LL, cons_list(index_uni(counter), nil_index_list()),
            (stan::math::log(sum_des_V) +
              (pow((des_X[(1 - 1)] - des_X[(2 - 1)]), 2) / sum_des_V)),
            "assigning variable LL");
          current_statement__ = 210;
          assign(XX, cons_list(index_uni(i), nil_index_list()),
            (((des_V[(2 - 1)] / sum_des_V) * des_X[(1 - 1)]) +
              ((des_V[(1 - 1)] / sum_des_V) * des_X[(2 - 1)])),
            "assigning variable XX");
          current_statement__ = 215;
          if ((primitive_value(logical_eq(des_V[(1 - 1)], 0)) ||
              primitive_value(logical_eq(des_V[(2 - 1)], 0)))) {
            current_statement__ = 213;
            assign(VV, cons_list(index_uni(i), nil_index_list()), 0,
              "assigning variable VV");
          } else {
            current_statement__ = 211;
            assign(VV, cons_list(index_uni(i), nil_index_list()),
              (1 / ((1 / des_V[(1 - 1)]) + (1 / des_V[(2 - 1)]))),
              "assigning variable VV");
          }
        } else {
          current_statement__ = 207;
          if (logical_eq(mis_code[(counter - 1)], 1)) {
            current_statement__ = 202;
            assign(LL, cons_list(index_uni(counter), nil_index_list()), 0,
              "assigning variable LL");
            current_statement__ = 203;
            counter_non_mis = (counter_non_mis + 1);
            current_statement__ = 204;
            assign(XX, cons_list(index_uni(i), nil_index_list()),
              des_X[(which_non_mis[(counter_non_mis - 1)] - 1)],
              "assigning variable XX");
            current_statement__ = 205;
            assign(VV, cons_list(index_uni(i), nil_index_list()),
              des_V[(which_non_mis[(counter_non_mis - 1)] - 1)],
              "assigning variable VV");
          } else {
            current_statement__ = 201;
            if (logical_eq(mis_code[(counter - 1)], 0)) {
              current_statement__ = 197;
              assign(LL, cons_list(index_uni(counter), nil_index_list()), 0,
                "assigning variable LL");
              current_statement__ = 198;
              assign(XX, cons_list(index_uni(i), nil_index_list()), 0,
                "assigning variable XX");
              current_statement__ = 199;
              assign(VV, cons_list(index_uni(i), nil_index_list()), -2,
                "assigning variable VV");
            } 
          }
        }
      }}
    current_statement__ = 218;
    return (-0.5 * sum(LL));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct prune_functor__ {
template <typename T1__, typename T8__, typename T9__, typename T10__>
stan::promote_args_t<stan::value_type_t<T1__>, stan::value_type_t<T8__>,
stan::value_type_t<T9__>,
stan::value_type_t<T10__>>
operator()(const int& n, const T1__& prune_T,
           const std::vector<std::vector<int>>& des_e,
           const std::vector<int>& tip_e, const std::vector<int>& real_e,
           const std::vector<int>& postorder,
           const std::vector<int>& mis_code,
           const std::vector<int>& which_non_mis, const T8__& X,
           const T9__& SE, const T10__& R, std::ostream* pstream__)  const 
{
return prune(n, prune_T, des_e, tip_e, real_e, postorder, mis_code,
         which_non_mis, X, SE, R, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_univar_evorates_normpri final : public model_base_crtp<model_univar_evorates_normpri> {
private:
  int n;
  int e;
  Eigen::Matrix<double, -1, -1> eV;
  Eigen::Matrix<double, -1, 1> prune_T;
  std::vector<std::vector<int>> des_e;
  std::vector<int> tip_e;
  std::vector<int> real_e;
  std::vector<int> postorder;
  std::vector<int> mis_code;
  int n_mis_2;
  int n_mis_1;
  std::vector<int> which_non_mis;
  Eigen::Matrix<double, -1, 1> X;
  Eigen::Matrix<double, -1, 1> p_SE;
  Eigen::Matrix<double, -1, 1> inv_n_obs;
  int n_contra;
  Eigen::Matrix<double, -1, 1> contra;
  Eigen::Matrix<double, -1, 1> contra_var;
  int n_mis_SE;
  std::vector<int> which_mis_SE;
  double R0_prior_mu;
  double R0_prior_sig;
  double Ysig2_prior_sig;
  double Rsig2_prior_sig;
  double Rmu_prior_mu;
  double Rmu_prior_sig;
  int constr_Rsig2;
  int constr_Rmu;
  double lik_power;
  int has_mis_SE;
  int has_contra;
  double sum_sq_scale_contra;
  Eigen::Matrix<double, -1, -1> chol_eV;
  Eigen::Matrix<double, -1, 1> T_l;
  Eigen::Matrix<double, -1, 1> T_1;
  Eigen::Matrix<double, -1, 1> T_2;
  int lik_pow_ind;
  double lik_const;
  int std_Ysig2_1dim__;
  int std_Rsig2_1dim__;
  int std_Rmu_1dim__;
  int raw_R_1dim__;
  int Ysig2_1dim__;
  int Rsig2_1dim__;
  int Rmu_1dim__;
 
public:
  ~model_univar_evorates_normpri() { }
  
  inline std::string model_name() const final { return "model_univar_evorates_normpri"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-1-g67504470", "stancflags = "};
  }
  
  
  model_univar_evorates_normpri(stan::io::var_context& context__,
                                unsigned int random_seed__ = 0,
                                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_univar_evorates_normpri_namespace::model_univar_evorates_normpri";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 70;
      context__.validate_dims("data initialization","n","int",
          context__.to_vec());
      n = std::numeric_limits<int>::min();
      
      current_statement__ = 70;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 71;
      context__.validate_dims("data initialization","e","int",
          context__.to_vec());
      e = std::numeric_limits<int>::min();
      
      current_statement__ = 71;
      e = context__.vals_i("e")[(1 - 1)];
      current_statement__ = 72;
      validate_non_negative_index("eV", "e", e);
      current_statement__ = 73;
      validate_non_negative_index("eV", "e", e);
      current_statement__ = 74;
      context__.validate_dims("data initialization","eV","double",
          context__.to_vec(e, e));
      eV = Eigen::Matrix<double, -1, -1>(e, e);
      stan::math::fill(eV, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> eV_flat__;
        current_statement__ = 74;
        assign(eV_flat__, nil_index_list(), context__.vals_r("eV"),
          "assigning variable eV_flat__");
        current_statement__ = 74;
        pos__ = 1;
        current_statement__ = 74;
        for (int sym1__ = 1; sym1__ <= e; ++sym1__) {
          current_statement__ = 74;
          for (int sym2__ = 1; sym2__ <= e; ++sym2__) {
            current_statement__ = 74;
            assign(eV,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              eV_flat__[(pos__ - 1)], "assigning variable eV");
            current_statement__ = 74;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 75;
      validate_non_negative_index("prune_T", "2 * n - 1", ((2 * n) - 1));
      current_statement__ = 76;
      context__.validate_dims("data initialization","prune_T","double",
          context__.to_vec(((2 * n) - 1)));
      prune_T = Eigen::Matrix<double, -1, 1>(((2 * n) - 1));
      stan::math::fill(prune_T, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prune_T_flat__;
        current_statement__ = 76;
        assign(prune_T_flat__, nil_index_list(), context__.vals_r("prune_T"),
          "assigning variable prune_T_flat__");
        current_statement__ = 76;
        pos__ = 1;
        current_statement__ = 76;
        for (int sym1__ = 1; sym1__ <= ((2 * n) - 1); ++sym1__) {
          current_statement__ = 76;
          assign(prune_T, cons_list(index_uni(sym1__), nil_index_list()),
            prune_T_flat__[(pos__ - 1)], "assigning variable prune_T");
          current_statement__ = 76;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 77;
      validate_non_negative_index("des_e", "2 * n - 1", ((2 * n) - 1));
      current_statement__ = 78;
      context__.validate_dims("data initialization","des_e","int",
          context__.to_vec(((2 * n) - 1), 2));
      des_e = std::vector<std::vector<int>>(((2 * n) - 1), std::vector<int>(2, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> des_e_flat__;
        current_statement__ = 78;
        assign(des_e_flat__, nil_index_list(), context__.vals_i("des_e"),
          "assigning variable des_e_flat__");
        current_statement__ = 78;
        pos__ = 1;
        current_statement__ = 78;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 78;
          for (int sym2__ = 1; sym2__ <= ((2 * n) - 1); ++sym2__) {
            current_statement__ = 78;
            assign(des_e,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              des_e_flat__[(pos__ - 1)], "assigning variable des_e");
            current_statement__ = 78;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 79;
      validate_non_negative_index("tip_e", "n", n);
      current_statement__ = 80;
      context__.validate_dims("data initialization","tip_e","int",
          context__.to_vec(n));
      tip_e = std::vector<int>(n, std::numeric_limits<int>::min());
      
      current_statement__ = 80;
      assign(tip_e, nil_index_list(), context__.vals_i("tip_e"),
        "assigning variable tip_e");
      current_statement__ = 81;
      validate_non_negative_index("real_e", "e", e);
      current_statement__ = 82;
      context__.validate_dims("data initialization","real_e","int",
          context__.to_vec(e));
      real_e = std::vector<int>(e, std::numeric_limits<int>::min());
      
      current_statement__ = 82;
      assign(real_e, nil_index_list(), context__.vals_i("real_e"),
        "assigning variable real_e");
      current_statement__ = 83;
      validate_non_negative_index("postorder", "n - 1", (n - 1));
      current_statement__ = 84;
      context__.validate_dims("data initialization","postorder","int",
          context__.to_vec((n - 1)));
      postorder = std::vector<int>((n - 1), std::numeric_limits<int>::min());
      
      current_statement__ = 84;
      assign(postorder, nil_index_list(), context__.vals_i("postorder"),
        "assigning variable postorder");
      current_statement__ = 85;
      validate_non_negative_index("mis_code", "n - 1", (n - 1));
      current_statement__ = 86;
      context__.validate_dims("data initialization","mis_code","int",
          context__.to_vec((n - 1)));
      mis_code = std::vector<int>((n - 1), std::numeric_limits<int>::min());
      
      current_statement__ = 86;
      assign(mis_code, nil_index_list(), context__.vals_i("mis_code"),
        "assigning variable mis_code");
      current_statement__ = 87;
      context__.validate_dims("data initialization","n_mis_2","int",
          context__.to_vec());
      n_mis_2 = std::numeric_limits<int>::min();
      
      current_statement__ = 87;
      n_mis_2 = context__.vals_i("n_mis_2")[(1 - 1)];
      current_statement__ = 88;
      context__.validate_dims("data initialization","n_mis_1","int",
          context__.to_vec());
      n_mis_1 = std::numeric_limits<int>::min();
      
      current_statement__ = 88;
      n_mis_1 = context__.vals_i("n_mis_1")[(1 - 1)];
      current_statement__ = 89;
      validate_non_negative_index("which_non_mis", "n_mis_1", n_mis_1);
      current_statement__ = 90;
      context__.validate_dims("data initialization","which_non_mis","int",
          context__.to_vec(n_mis_1));
      which_non_mis = std::vector<int>(n_mis_1, std::numeric_limits<int>::min());
      
      current_statement__ = 90;
      assign(which_non_mis, nil_index_list(),
        context__.vals_i("which_non_mis"), "assigning variable which_non_mis");
      current_statement__ = 91;
      validate_non_negative_index("X", "n", n);
      current_statement__ = 92;
      context__.validate_dims("data initialization","X","double",
          context__.to_vec(n));
      X = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 92;
        assign(X_flat__, nil_index_list(), context__.vals_r("X"),
          "assigning variable X_flat__");
        current_statement__ = 92;
        pos__ = 1;
        current_statement__ = 92;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 92;
          assign(X, cons_list(index_uni(sym1__), nil_index_list()),
            X_flat__[(pos__ - 1)], "assigning variable X");
          current_statement__ = 92;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 93;
      validate_non_negative_index("p_SE", "n", n);
      current_statement__ = 94;
      context__.validate_dims("data initialization","p_SE","double",
          context__.to_vec(n));
      p_SE = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(p_SE, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> p_SE_flat__;
        current_statement__ = 94;
        assign(p_SE_flat__, nil_index_list(), context__.vals_r("p_SE"),
          "assigning variable p_SE_flat__");
        current_statement__ = 94;
        pos__ = 1;
        current_statement__ = 94;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 94;
          assign(p_SE, cons_list(index_uni(sym1__), nil_index_list()),
            p_SE_flat__[(pos__ - 1)], "assigning variable p_SE");
          current_statement__ = 94;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 95;
      validate_non_negative_index("inv_n_obs", "n", n);
      current_statement__ = 96;
      context__.validate_dims("data initialization","inv_n_obs","double",
          context__.to_vec(n));
      inv_n_obs = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(inv_n_obs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> inv_n_obs_flat__;
        current_statement__ = 96;
        assign(inv_n_obs_flat__, nil_index_list(),
          context__.vals_r("inv_n_obs"),
          "assigning variable inv_n_obs_flat__");
        current_statement__ = 96;
        pos__ = 1;
        current_statement__ = 96;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 96;
          assign(inv_n_obs, cons_list(index_uni(sym1__), nil_index_list()),
            inv_n_obs_flat__[(pos__ - 1)], "assigning variable inv_n_obs");
          current_statement__ = 96;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 97;
      context__.validate_dims("data initialization","n_contra","int",
          context__.to_vec());
      n_contra = std::numeric_limits<int>::min();
      
      current_statement__ = 97;
      n_contra = context__.vals_i("n_contra")[(1 - 1)];
      current_statement__ = 98;
      validate_non_negative_index("contra", "n_contra", n_contra);
      current_statement__ = 99;
      context__.validate_dims("data initialization","contra","double",
          context__.to_vec(n_contra));
      contra = Eigen::Matrix<double, -1, 1>(n_contra);
      stan::math::fill(contra, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> contra_flat__;
        current_statement__ = 99;
        assign(contra_flat__, nil_index_list(), context__.vals_r("contra"),
          "assigning variable contra_flat__");
        current_statement__ = 99;
        pos__ = 1;
        current_statement__ = 99;
        for (int sym1__ = 1; sym1__ <= n_contra; ++sym1__) {
          current_statement__ = 99;
          assign(contra, cons_list(index_uni(sym1__), nil_index_list()),
            contra_flat__[(pos__ - 1)], "assigning variable contra");
          current_statement__ = 99;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 100;
      validate_non_negative_index("contra_var", "n_contra", n_contra);
      current_statement__ = 101;
      context__.validate_dims("data initialization","contra_var","double",
          context__.to_vec(n_contra));
      contra_var = Eigen::Matrix<double, -1, 1>(n_contra);
      stan::math::fill(contra_var, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> contra_var_flat__;
        current_statement__ = 101;
        assign(contra_var_flat__, nil_index_list(),
          context__.vals_r("contra_var"),
          "assigning variable contra_var_flat__");
        current_statement__ = 101;
        pos__ = 1;
        current_statement__ = 101;
        for (int sym1__ = 1; sym1__ <= n_contra; ++sym1__) {
          current_statement__ = 101;
          assign(contra_var, cons_list(index_uni(sym1__), nil_index_list()),
            contra_var_flat__[(pos__ - 1)], "assigning variable contra_var");
          current_statement__ = 101;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 102;
      context__.validate_dims("data initialization","n_mis_SE","int",
          context__.to_vec());
      n_mis_SE = std::numeric_limits<int>::min();
      
      current_statement__ = 102;
      n_mis_SE = context__.vals_i("n_mis_SE")[(1 - 1)];
      current_statement__ = 103;
      validate_non_negative_index("which_mis_SE", "n_mis_SE", n_mis_SE);
      current_statement__ = 104;
      context__.validate_dims("data initialization","which_mis_SE","int",
          context__.to_vec(n_mis_SE));
      which_mis_SE = std::vector<int>(n_mis_SE, std::numeric_limits<int>::min());
      
      current_statement__ = 104;
      assign(which_mis_SE, nil_index_list(),
        context__.vals_i("which_mis_SE"), "assigning variable which_mis_SE");
      current_statement__ = 105;
      context__.validate_dims("data initialization","R0_prior_mu","double",
          context__.to_vec());
      R0_prior_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 105;
      R0_prior_mu = context__.vals_r("R0_prior_mu")[(1 - 1)];
      current_statement__ = 106;
      context__.validate_dims("data initialization","R0_prior_sig","double",
          context__.to_vec());
      R0_prior_sig = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 106;
      R0_prior_sig = context__.vals_r("R0_prior_sig")[(1 - 1)];
      current_statement__ = 107;
      context__.validate_dims("data initialization","Ysig2_prior_sig",
          "double",context__.to_vec());
      Ysig2_prior_sig = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 107;
      Ysig2_prior_sig = context__.vals_r("Ysig2_prior_sig")[(1 - 1)];
      current_statement__ = 108;
      context__.validate_dims("data initialization","Rsig2_prior_sig",
          "double",context__.to_vec());
      Rsig2_prior_sig = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 108;
      Rsig2_prior_sig = context__.vals_r("Rsig2_prior_sig")[(1 - 1)];
      current_statement__ = 109;
      context__.validate_dims("data initialization","Rmu_prior_mu","double",
          context__.to_vec());
      Rmu_prior_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 109;
      Rmu_prior_mu = context__.vals_r("Rmu_prior_mu")[(1 - 1)];
      current_statement__ = 110;
      context__.validate_dims("data initialization","Rmu_prior_sig","double",
          context__.to_vec());
      Rmu_prior_sig = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 110;
      Rmu_prior_sig = context__.vals_r("Rmu_prior_sig")[(1 - 1)];
      current_statement__ = 111;
      context__.validate_dims("data initialization","constr_Rsig2","int",
          context__.to_vec());
      constr_Rsig2 = std::numeric_limits<int>::min();
      
      current_statement__ = 111;
      constr_Rsig2 = context__.vals_i("constr_Rsig2")[(1 - 1)];
      current_statement__ = 112;
      context__.validate_dims("data initialization","constr_Rmu","int",
          context__.to_vec());
      constr_Rmu = std::numeric_limits<int>::min();
      
      current_statement__ = 112;
      constr_Rmu = context__.vals_i("constr_Rmu")[(1 - 1)];
      current_statement__ = 113;
      context__.validate_dims("data initialization","lik_power","double",
          context__.to_vec());
      lik_power = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 113;
      lik_power = context__.vals_r("lik_power")[(1 - 1)];
      current_statement__ = 114;
      has_mis_SE = std::numeric_limits<int>::min();
      
      current_statement__ = 115;
      has_contra = std::numeric_limits<int>::min();
      
      current_statement__ = 116;
      sum_sq_scale_contra = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 117;
      validate_non_negative_index("chol_eV", "constr_Rsig2 ? 0 : e",
                                  (constr_Rsig2 ? 0 : e));
      current_statement__ = 118;
      validate_non_negative_index("chol_eV", "constr_Rsig2 ? 0 : e",
                                  (constr_Rsig2 ? 0 : e));
      current_statement__ = 119;
      chol_eV = Eigen::Matrix<double, -1, -1>((constr_Rsig2 ? 0 : e), (
        constr_Rsig2 ? 0 : e));
      stan::math::fill(chol_eV, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 120;
      validate_non_negative_index("T_l", "constr_Rmu ? 0 : e",
                                  (constr_Rmu ? 0 : e));
      current_statement__ = 121;
      T_l = Eigen::Matrix<double, -1, 1>((constr_Rmu ? 0 : e));
      stan::math::fill(T_l, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 122;
      validate_non_negative_index("T_1", "constr_Rmu ? 0 : e",
                                  (constr_Rmu ? 0 : e));
      current_statement__ = 123;
      T_1 = Eigen::Matrix<double, -1, 1>((constr_Rmu ? 0 : e));
      stan::math::fill(T_1, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 124;
      validate_non_negative_index("T_2", "constr_Rmu ? 0 : e",
                                  (constr_Rmu ? 0 : e));
      current_statement__ = 125;
      T_2 = Eigen::Matrix<double, -1, 1>((constr_Rmu ? 0 : e));
      stan::math::fill(T_2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 126;
      lik_pow_ind = std::numeric_limits<int>::min();
      
      current_statement__ = 127;
      lik_const = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 132;
      if (logical_eq(n_mis_SE, 0)) {
        current_statement__ = 130;
        has_mis_SE = 0;
      } else {
        current_statement__ = 128;
        has_mis_SE = 1;
      }
      current_statement__ = 138;
      if (logical_eq(n_contra, 0)) {
        current_statement__ = 136;
        has_contra = 0;
      } else {
        current_statement__ = 133;
        has_contra = 1;
        current_statement__ = 134;
        sum_sq_scale_contra = dot_self(
                                elt_divide(contra,
                                  stan::math::sqrt(contra_var)));
      }
      current_statement__ = 141;
      if (logical_negation(constr_Rsig2)) {
        current_statement__ = 139;
        assign(chol_eV, nil_index_list(), cholesky_decompose(eV),
          "assigning variable chol_eV");
      } 
      current_statement__ = 146;
      if (logical_negation(constr_Rmu)) {
        current_statement__ = 142;
        assign(T_l, nil_index_list(),
          rvalue(prune_T, cons_list(index_multi(real_e), nil_index_list()),
            "prune_T"), "assigning variable T_l");
        current_statement__ = 143;
        assign(T_1, nil_index_list(),
          subtract(diagonal(eV),
            divide(
              rvalue(prune_T,
                cons_list(index_multi(real_e), nil_index_list()), "prune_T"),
              3)), "assigning variable T_1");
        current_statement__ = 144;
        assign(T_2, nil_index_list(),
          add(diagonal(eV),
            divide(
              multiply(2,
                rvalue(prune_T,
                  cons_list(index_multi(real_e), nil_index_list()),
                  "prune_T")), 3)), "assigning variable T_2");
      } 
      current_statement__ = 151;
      if (logical_eq(lik_power, 0)) {
        current_statement__ = 149;
        lik_pow_ind = 0;
      } else {
        current_statement__ = 147;
        lik_pow_ind = 1;
      }
      current_statement__ = 152;
      lik_const = ((-0.5 * n_mis_2) *
                    stan::math::log((2 * stan::math::pi())));
      current_statement__ = 155;
      if (has_contra) {
        current_statement__ = 153;
        lik_const = (lik_const +
                      (-0.5 *
                        ((n_contra * stan::math::log((2 * stan::math::pi())))
                          + sum(stan::math::log(contra_var)))));
      } 
      current_statement__ = 156;
      std_Ysig2_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 156;
      std_Ysig2_1dim__ = (has_mis_SE ? 1 : 0);
      current_statement__ = 156;
      validate_non_negative_index("std_Ysig2", "has_mis_SE ? 1 : 0",
                                  std_Ysig2_1dim__);
      current_statement__ = 157;
      std_Rsig2_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 157;
      std_Rsig2_1dim__ = (constr_Rsig2 ? 0 : 1);
      current_statement__ = 157;
      validate_non_negative_index("std_Rsig2", "constr_Rsig2 ? 0 : 1",
                                  std_Rsig2_1dim__);
      current_statement__ = 158;
      std_Rmu_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 158;
      std_Rmu_1dim__ = (constr_Rmu ? 0 : 1);
      current_statement__ = 158;
      validate_non_negative_index("std_Rmu", "constr_Rmu ? 0 : 1",
                                  std_Rmu_1dim__);
      current_statement__ = 159;
      raw_R_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 159;
      raw_R_1dim__ = (constr_Rsig2 ? 0 : e);
      current_statement__ = 159;
      validate_non_negative_index("raw_R", "constr_Rsig2 ? 0 : e",
                                  raw_R_1dim__);
      current_statement__ = 160;
      Ysig2_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 160;
      Ysig2_1dim__ = (has_mis_SE ? 1 : 0);
      current_statement__ = 160;
      validate_non_negative_index("Ysig2", "has_mis_SE ? 1 : 0", Ysig2_1dim__);
      current_statement__ = 161;
      validate_non_negative_index("SE", "n", n);
      current_statement__ = 162;
      Rsig2_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 162;
      Rsig2_1dim__ = (constr_Rsig2 ? 0 : 1);
      current_statement__ = 162;
      validate_non_negative_index("Rsig2", "constr_Rsig2 ? 0 : 1",
                                  Rsig2_1dim__);
      current_statement__ = 163;
      Rmu_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 163;
      Rmu_1dim__ = (constr_Rmu ? 0 : 1);
      current_statement__ = 163;
      validate_non_negative_index("Rmu", "constr_Rmu ? 0 : 1", Rmu_1dim__);
      current_statement__ = 164;
      validate_non_negative_index("R", "e", e);
      current_statement__ = 165;
      validate_non_negative_index("tmp_mu", "e", e);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += std_Ysig2_1dim__;
      num_params_r__ += std_Rsig2_1dim__;
      num_params_r__ += std_Rmu_1dim__;
      num_params_r__ += raw_R_1dim__;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_univar_evorates_normpri_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ std_R0;
      std_R0 = DUMMY_VAR__;
      
      current_statement__ = 1;
      std_R0 = in__.scalar();
      std::vector<local_scalar_t__> std_Ysig2;
      std_Ysig2 = std::vector<local_scalar_t__>(std_Ysig2_1dim__, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= std_Ysig2_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(std_Ysig2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable std_Ysig2");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= std_Ysig2_1dim__; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(std_Ysig2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(std_Ysig2[(sym1__ - 1)], 0,
              (stan::math::pi() / 2), lp__), "assigning variable std_Ysig2");
        } else {
          current_statement__ = 2;
          assign(std_Ysig2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(std_Ysig2[(sym1__ - 1)], 0,
              (stan::math::pi() / 2)), "assigning variable std_Ysig2");
        }}
      std::vector<local_scalar_t__> std_Rsig2;
      std_Rsig2 = std::vector<local_scalar_t__>(std_Rsig2_1dim__, DUMMY_VAR__);
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= std_Rsig2_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(std_Rsig2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable std_Rsig2");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= std_Rsig2_1dim__; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(std_Rsig2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(std_Rsig2[(sym1__ - 1)], 0,
              (stan::math::pi() / 2), lp__), "assigning variable std_Rsig2");
        } else {
          current_statement__ = 3;
          assign(std_Rsig2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(std_Rsig2[(sym1__ - 1)], 0,
              (stan::math::pi() / 2)), "assigning variable std_Rsig2");
        }}
      std::vector<local_scalar_t__> std_Rmu;
      std_Rmu = std::vector<local_scalar_t__>(std_Rmu_1dim__, DUMMY_VAR__);
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= std_Rmu_1dim__; ++sym1__) {
        current_statement__ = 4;
        assign(std_Rmu, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable std_Rmu");}
      Eigen::Matrix<local_scalar_t__, -1, 1> raw_R;
      raw_R = Eigen::Matrix<local_scalar_t__, -1, 1>(raw_R_1dim__);
      stan::math::fill(raw_R, DUMMY_VAR__);
      
      current_statement__ = 5;
      raw_R = in__.vector(raw_R_1dim__);
      local_scalar_t__ R0;
      R0 = DUMMY_VAR__;
      
      std::vector<local_scalar_t__> Ysig2;
      Ysig2 = std::vector<local_scalar_t__>(Ysig2_1dim__, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> SE;
      SE = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
      stan::math::fill(SE, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> Rsig2;
      Rsig2 = std::vector<local_scalar_t__>(Rsig2_1dim__, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> Rmu;
      Rmu = std::vector<local_scalar_t__>(Rmu_1dim__, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> R;
      R = Eigen::Matrix<local_scalar_t__, -1, 1>(e);
      stan::math::fill(R, DUMMY_VAR__);
      
      local_scalar_t__ tmp_lik;
      tmp_lik = DUMMY_VAR__;
      
      Eigen::Matrix<local_scalar_t__, -1, 1> tmp_mu;
      tmp_mu = Eigen::Matrix<local_scalar_t__, -1, 1>(e);
      stan::math::fill(tmp_mu, DUMMY_VAR__);
      
      current_statement__ = 14;
      R0 = (R0_prior_mu + (R0_prior_sig * std_R0));
      current_statement__ = 17;
      if (has_mis_SE) {
        current_statement__ = 15;
        assign(Ysig2, cons_list(index_uni(1), nil_index_list()),
          (Ysig2_prior_sig * stan::math::tan(std_Ysig2[(1 - 1)])),
          "assigning variable Ysig2");
      } 
      current_statement__ = 20;
      if (logical_negation(constr_Rsig2)) {
        current_statement__ = 18;
        assign(Rsig2, cons_list(index_uni(1), nil_index_list()),
          (Rsig2_prior_sig * stan::math::tan(std_Rsig2[(1 - 1)])),
          "assigning variable Rsig2");
      } 
      current_statement__ = 23;
      if (logical_negation(constr_Rmu)) {
        current_statement__ = 21;
        assign(Rmu, cons_list(index_uni(1), nil_index_list()),
          (Rmu_prior_mu + (Rmu_prior_sig * std_Rmu[(1 - 1)])),
          "assigning variable Rmu");
      } 
      current_statement__ = 24;
      assign(R, nil_index_list(), rep_vector(R0, e), "assigning variable R");
      current_statement__ = 27;
      if (logical_negation(constr_Rmu)) {
        current_statement__ = 25;
        assign(R, nil_index_list(),
          add(
            subtract(
              subtract(stan::model::deep_copy(R),
                stan::math::log(stan::math::fabs(Rmu[(1 - 1)]))),
              stan::math::log(T_l)),
            stan::math::log(
              stan::math::fabs(
                subtract(stan::math::exp(multiply(Rmu[(1 - 1)], T_2)),
                  stan::math::exp(multiply(Rmu[(1 - 1)], T_1)))))),
          "assigning variable R");
      } 
      current_statement__ = 28;
      assign(tmp_mu, nil_index_list(), R, "assigning variable tmp_mu");
      current_statement__ = 31;
      if (logical_negation(constr_Rsig2)) {
        current_statement__ = 29;
        assign(R, nil_index_list(),
          add(stan::model::deep_copy(R),
            multiply(multiply(stan::math::sqrt(Rsig2[(1 - 1)]), chol_eV),
              raw_R)), "assigning variable R");
      } 
      current_statement__ = 32;
      assign(SE, nil_index_list(),
        get_SE(n, p_SE, inv_n_obs, Ysig2, which_mis_SE,
          has_mis_SE, pstream__), "assigning variable SE");
      current_statement__ = 40;
      if (lik_pow_ind) {
        current_statement__ = 35;
        tmp_lik = prune(n, prune_T, des_e, tip_e, real_e, postorder,
                    mis_code, which_non_mis, X, SE, R, pstream__);
        current_statement__ = 38;
        if (has_contra) {
          current_statement__ = 36;
          tmp_lik = (tmp_lik +
                      (-0.5 *
                        ((sum_sq_scale_contra / Ysig2[(1 - 1)]) +
                          (n_contra * stan::math::log(Ysig2[(1 - 1)])))));
        } 
      } else {
        current_statement__ = 33;
        tmp_lik = 0;
      }
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= Rsig2_1dim__; ++sym1__) {
        current_statement__ = 9;
        current_statement__ = 9;
        check_greater_or_equal(function__, "Rsig2[sym1__]",
                               Rsig2[(sym1__ - 1)], 0);}
      {
        current_statement__ = 62;
        lp_accum__.add(std_normal_lpdf<propto__>(std_R0));
        current_statement__ = 65;
        if (logical_negation(constr_Rmu)) {
          current_statement__ = 63;
          lp_accum__.add(std_normal_lpdf<propto__>(std_Rmu[(1 - 1)]));
        } 
        current_statement__ = 68;
        if (logical_negation(constr_Rsig2)) {
          current_statement__ = 66;
          lp_accum__.add(std_normal_lpdf<propto__>(raw_R));
        } 
        current_statement__ = 69;
        lp_accum__.add((lik_power * tmp_lik));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_univar_evorates_normpri_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double std_R0;
      std_R0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      std_R0 = in__.scalar();
      std::vector<double> std_Ysig2;
      std_Ysig2 = std::vector<double>(std_Ysig2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= std_Ysig2_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(std_Ysig2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable std_Ysig2");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= std_Ysig2_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(std_Ysig2, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(std_Ysig2[(sym1__ - 1)], 0,
            (stan::math::pi() / 2)), "assigning variable std_Ysig2");}
      std::vector<double> std_Rsig2;
      std_Rsig2 = std::vector<double>(std_Rsig2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= std_Rsig2_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(std_Rsig2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable std_Rsig2");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= std_Rsig2_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(std_Rsig2, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(std_Rsig2[(sym1__ - 1)], 0,
            (stan::math::pi() / 2)), "assigning variable std_Rsig2");}
      std::vector<double> std_Rmu;
      std_Rmu = std::vector<double>(std_Rmu_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= std_Rmu_1dim__; ++sym1__) {
        current_statement__ = 4;
        assign(std_Rmu, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable std_Rmu");}
      Eigen::Matrix<double, -1, 1> raw_R;
      raw_R = Eigen::Matrix<double, -1, 1>(raw_R_1dim__);
      stan::math::fill(raw_R, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      raw_R = in__.vector(raw_R_1dim__);
      double R0;
      R0 = std::numeric_limits<double>::quiet_NaN();
      
      std::vector<double> Ysig2;
      Ysig2 = std::vector<double>(Ysig2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> SE;
      SE = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(SE, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Rsig2;
      Rsig2 = std::vector<double>(Rsig2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Rmu;
      Rmu = std::vector<double>(Rmu_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> R;
      R = Eigen::Matrix<double, -1, 1>(e);
      stan::math::fill(R, std::numeric_limits<double>::quiet_NaN());
      
      double tmp_lik;
      tmp_lik = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> tmp_mu;
      tmp_mu = Eigen::Matrix<double, -1, 1>(e);
      stan::math::fill(tmp_mu, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(std_R0);
      for (int sym1__ = 1; sym1__ <= std_Ysig2_1dim__; ++sym1__) {
        vars__.emplace_back(std_Ysig2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= std_Rsig2_1dim__; ++sym1__) {
        vars__.emplace_back(std_Rsig2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= std_Rmu_1dim__; ++sym1__) {
        vars__.emplace_back(std_Rmu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= raw_R_1dim__; ++sym1__) {
        vars__.emplace_back(raw_R[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 14;
      R0 = (R0_prior_mu + (R0_prior_sig * std_R0));
      current_statement__ = 17;
      if (has_mis_SE) {
        current_statement__ = 15;
        assign(Ysig2, cons_list(index_uni(1), nil_index_list()),
          (Ysig2_prior_sig * stan::math::tan(std_Ysig2[(1 - 1)])),
          "assigning variable Ysig2");
      } 
      current_statement__ = 20;
      if (logical_negation(constr_Rsig2)) {
        current_statement__ = 18;
        assign(Rsig2, cons_list(index_uni(1), nil_index_list()),
          (Rsig2_prior_sig * stan::math::tan(std_Rsig2[(1 - 1)])),
          "assigning variable Rsig2");
      } 
      current_statement__ = 23;
      if (logical_negation(constr_Rmu)) {
        current_statement__ = 21;
        assign(Rmu, cons_list(index_uni(1), nil_index_list()),
          (Rmu_prior_mu + (Rmu_prior_sig * std_Rmu[(1 - 1)])),
          "assigning variable Rmu");
      } 
      current_statement__ = 24;
      assign(R, nil_index_list(), rep_vector(R0, e), "assigning variable R");
      current_statement__ = 27;
      if (logical_negation(constr_Rmu)) {
        current_statement__ = 25;
        assign(R, nil_index_list(),
          add(
            subtract(
              subtract(stan::model::deep_copy(R),
                stan::math::log(stan::math::fabs(Rmu[(1 - 1)]))),
              stan::math::log(T_l)),
            stan::math::log(
              stan::math::fabs(
                subtract(stan::math::exp(multiply(Rmu[(1 - 1)], T_2)),
                  stan::math::exp(multiply(Rmu[(1 - 1)], T_1)))))),
          "assigning variable R");
      } 
      current_statement__ = 28;
      assign(tmp_mu, nil_index_list(), R, "assigning variable tmp_mu");
      current_statement__ = 31;
      if (logical_negation(constr_Rsig2)) {
        current_statement__ = 29;
        assign(R, nil_index_list(),
          add(stan::model::deep_copy(R),
            multiply(multiply(stan::math::sqrt(Rsig2[(1 - 1)]), chol_eV),
              raw_R)), "assigning variable R");
      } 
      current_statement__ = 32;
      assign(SE, nil_index_list(),
        get_SE(n, p_SE, inv_n_obs, Ysig2, which_mis_SE,
          has_mis_SE, pstream__), "assigning variable SE");
      current_statement__ = 40;
      if (lik_pow_ind) {
        current_statement__ = 35;
        tmp_lik = prune(n, prune_T, des_e, tip_e, real_e, postorder,
                    mis_code, which_non_mis, X, SE, R, pstream__);
        current_statement__ = 38;
        if (has_contra) {
          current_statement__ = 36;
          tmp_lik = (tmp_lik +
                      (-0.5 *
                        ((sum_sq_scale_contra / Ysig2[(1 - 1)]) +
                          (n_contra * stan::math::log(Ysig2[(1 - 1)])))));
        } 
      } else {
        current_statement__ = 33;
        tmp_lik = 0;
      }
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= Rsig2_1dim__; ++sym1__) {
        current_statement__ = 9;
        current_statement__ = 9;
        check_greater_or_equal(function__, "Rsig2[sym1__]",
                               Rsig2[(sym1__ - 1)], 0);}
      if (emit_transformed_parameters__) {
        vars__.emplace_back(R0);
        for (int sym1__ = 1; sym1__ <= Ysig2_1dim__; ++sym1__) {
          vars__.emplace_back(Ysig2[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          vars__.emplace_back(SE[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= Rsig2_1dim__; ++sym1__) {
          vars__.emplace_back(Rsig2[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= Rmu_1dim__; ++sym1__) {
          vars__.emplace_back(Rmu[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= e; ++sym1__) {
          vars__.emplace_back(R[(sym1__ - 1)]);}
        vars__.emplace_back(tmp_lik);
        for (int sym1__ = 1; sym1__ <= e; ++sym1__) {
          vars__.emplace_back(tmp_mu[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double lik;
      lik = std::numeric_limits<double>::quiet_NaN();
      
      double prior;
      prior = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 50;
      if (lik_pow_ind) {
        current_statement__ = 48;
        lik = (tmp_lik + lik_const);
      } else {
        current_statement__ = 43;
        lik = (prune(n, prune_T, des_e, tip_e, real_e, postorder, mis_code,
                 which_non_mis, X, SE, R, pstream__) + lik_const);
        current_statement__ = 46;
        if (has_contra) {
          current_statement__ = 44;
          lik = (lik +
                  (-0.5 *
                    ((sum_sq_scale_contra / Ysig2[(1 - 1)]) +
                      (n_contra * stan::math::log(Ysig2[(1 - 1)])))));
        } 
      }
      current_statement__ = 51;
      prior = normal_lpdf<false>(R0, R0_prior_mu, R0_prior_sig);
      current_statement__ = 54;
      if (has_contra) {
        current_statement__ = 52;
        prior = (prior +
                  (cauchy_lpdf<false>(Ysig2, 0, Ysig2_prior_sig) +
                    stan::math::log(2)));
      } 
      current_statement__ = 58;
      if (logical_negation(constr_Rsig2)) {
        current_statement__ = 55;
        prior = (prior +
                  (cauchy_lpdf<false>(Rsig2[(1 - 1)], 0, Rsig2_prior_sig) +
                    stan::math::log(2)));
        current_statement__ = 56;
        prior = (prior +
                  multi_normal_cholesky_lpdf<false>(R, tmp_mu,
                    multiply(stan::math::sqrt(Rsig2[(1 - 1)]), chol_eV)));
      } 
      current_statement__ = 61;
      if (logical_negation(constr_Rmu)) {
        current_statement__ = 59;
        prior = (prior +
                  normal_lpdf<false>(Rmu[(1 - 1)], Rmu_prior_mu,
                    Rmu_prior_sig));
      } 
      vars__.emplace_back(lik);
      vars__.emplace_back(prior);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double std_R0;
      std_R0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      std_R0 = context__.vals_r("std_R0")[(1 - 1)];
      std::vector<double> std_Ysig2;
      std_Ysig2 = std::vector<double>(std_Ysig2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(std_Ysig2, nil_index_list(), context__.vals_r("std_Ysig2"),
        "assigning variable std_Ysig2");
      std::vector<double> std_Ysig2_free__;
      std_Ysig2_free__ = std::vector<double>(std_Ysig2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= std_Ysig2_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(std_Ysig2_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(std_Ysig2[(sym1__ - 1)], 0,
            (stan::math::pi() / 2)), "assigning variable std_Ysig2_free__");}
      std::vector<double> std_Rsig2;
      std_Rsig2 = std::vector<double>(std_Rsig2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      assign(std_Rsig2, nil_index_list(), context__.vals_r("std_Rsig2"),
        "assigning variable std_Rsig2");
      std::vector<double> std_Rsig2_free__;
      std_Rsig2_free__ = std::vector<double>(std_Rsig2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= std_Rsig2_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(std_Rsig2_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(std_Rsig2[(sym1__ - 1)], 0,
            (stan::math::pi() / 2)), "assigning variable std_Rsig2_free__");}
      std::vector<double> std_Rmu;
      std_Rmu = std::vector<double>(std_Rmu_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(std_Rmu, nil_index_list(), context__.vals_r("std_Rmu"),
        "assigning variable std_Rmu");
      Eigen::Matrix<double, -1, 1> raw_R;
      raw_R = Eigen::Matrix<double, -1, 1>(raw_R_1dim__);
      stan::math::fill(raw_R, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> raw_R_flat__;
        current_statement__ = 5;
        assign(raw_R_flat__, nil_index_list(), context__.vals_r("raw_R"),
          "assigning variable raw_R_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= raw_R_1dim__; ++sym1__) {
          current_statement__ = 5;
          assign(raw_R, cons_list(index_uni(sym1__), nil_index_list()),
            raw_R_flat__[(pos__ - 1)], "assigning variable raw_R");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      vars__.emplace_back(std_R0);
      for (int sym1__ = 1; sym1__ <= std_Ysig2_1dim__; ++sym1__) {
        vars__.emplace_back(std_Ysig2_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= std_Rsig2_1dim__; ++sym1__) {
        vars__.emplace_back(std_Rsig2_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= std_Rmu_1dim__; ++sym1__) {
        vars__.emplace_back(std_Rmu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= raw_R_1dim__; ++sym1__) {
        vars__.emplace_back(raw_R[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("std_R0");
    names__.emplace_back("std_Ysig2");
    names__.emplace_back("std_Rsig2");
    names__.emplace_back("std_Rmu");
    names__.emplace_back("raw_R");
    names__.emplace_back("R0");
    names__.emplace_back("Ysig2");
    names__.emplace_back("SE");
    names__.emplace_back("Rsig2");
    names__.emplace_back("Rmu");
    names__.emplace_back("R");
    names__.emplace_back("tmp_lik");
    names__.emplace_back("tmp_mu");
    names__.emplace_back("lik");
    names__.emplace_back("prior");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(std_Ysig2_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(std_Rsig2_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(std_Rmu_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(raw_R_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(Ysig2_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(Rsig2_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Rmu_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(e)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(e)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "std_R0");
    for (int sym1__ = 1; sym1__ <= std_Ysig2_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "std_Ysig2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= std_Rsig2_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "std_Rsig2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= std_Rmu_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "std_Rmu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= raw_R_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "raw_R" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "R0");
      for (int sym1__ = 1; sym1__ <= Ysig2_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Ysig2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "SE" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Rsig2_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Rsig2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Rmu_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Rmu" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= e; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "R" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "tmp_lik");
      for (int sym1__ = 1; sym1__ <= e; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tmp_mu" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "lik");
      param_names__.emplace_back(std::string() + "prior");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "std_R0");
    for (int sym1__ = 1; sym1__ <= std_Ysig2_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "std_Ysig2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= std_Rsig2_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "std_Rsig2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= std_Rmu_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "std_Rmu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= raw_R_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "raw_R" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "R0");
      for (int sym1__ = 1; sym1__ <= Ysig2_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Ysig2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "SE" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Rsig2_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Rsig2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Rmu_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Rmu" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= e; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "R" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "tmp_lik");
      for (int sym1__ = 1; sym1__ <= e; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tmp_mu" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "lik");
      param_names__.emplace_back(std::string() + "prior");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"std_R0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"std_Ysig2\",\"type\":{\"name\":\"array\",\"length\":" << std_Ysig2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"std_Rsig2\",\"type\":{\"name\":\"array\",\"length\":" << std_Rsig2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"std_Rmu\",\"type\":{\"name\":\"array\",\"length\":" << std_Rmu_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"raw_R\",\"type\":{\"name\":\"vector\",\"length\":" << raw_R_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"R0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Ysig2\",\"type\":{\"name\":\"array\",\"length\":" << Ysig2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"SE\",\"type\":{\"name\":\"vector\",\"length\":" << n << "},\"block\":\"transformed_parameters\"},{\"name\":\"Rsig2\",\"type\":{\"name\":\"array\",\"length\":" << Rsig2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"Rmu\",\"type\":{\"name\":\"array\",\"length\":" << Rmu_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"vector\",\"length\":" << e << "},\"block\":\"transformed_parameters\"},{\"name\":\"tmp_lik\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"tmp_mu\",\"type\":{\"name\":\"vector\",\"length\":" << e << "},\"block\":\"transformed_parameters\"},{\"name\":\"lik\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"std_R0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"std_Ysig2\",\"type\":{\"name\":\"array\",\"length\":" << std_Ysig2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"std_Rsig2\",\"type\":{\"name\":\"array\",\"length\":" << std_Rsig2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"std_Rmu\",\"type\":{\"name\":\"array\",\"length\":" << std_Rmu_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"raw_R\",\"type\":{\"name\":\"vector\",\"length\":" << raw_R_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"R0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Ysig2\",\"type\":{\"name\":\"array\",\"length\":" << Ysig2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"SE\",\"type\":{\"name\":\"vector\",\"length\":" << n << "},\"block\":\"transformed_parameters\"},{\"name\":\"Rsig2\",\"type\":{\"name\":\"array\",\"length\":" << Rsig2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"Rmu\",\"type\":{\"name\":\"array\",\"length\":" << Rmu_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"vector\",\"length\":" << e << "},\"block\":\"transformed_parameters\"},{\"name\":\"tmp_lik\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"tmp_mu\",\"type\":{\"name\":\"vector\",\"length\":" << e << "},\"block\":\"transformed_parameters\"},{\"name\":\"lik\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_univar_evorates_normpri_namespace::model_univar_evorates_normpri;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_univar_evorates_normpri_namespace::profiles__;
}
#endif
#endif
